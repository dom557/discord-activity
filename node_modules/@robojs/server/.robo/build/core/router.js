import { createRouter } from "./radix3.js";
export class Router {
    addRoute(route) {
        this._router.insert(route.path, route);
        this._routes.push(route);
    }
    find(path) {
        // Remove query params from the path to avoid param issues.
        const hasQuery = path.includes('?');
        const route = this._router.lookup(hasQuery ? path.substring(0, path.indexOf('?')) : path);
        if (!route) {
            return null;
        }
        return {
            handler: route.handler,
            params: route.params,
            path: route.path,
            query: hasQuery ? parseQuery(path) : {}
        };
    }
    removeRoute(path) {
        this._router.remove(path);
        const routeIndex = this._routes.findIndex((route)=>route.path === path);
        this._routes.splice(routeIndex, 1);
    }
    stats() {
        return {
            key: 'radix-router',
            numRoutes: this._routes.length,
            routes: this._routes
        };
    }
    constructor(){
        this._router = createRouter();
        this._routes = [];
    }
}
const parseQuery = (path)=>{
    const query = {};
    // Parse out queries!
    const queries = path.substring(path.indexOf('?') + 1).split('&');
    for (const queryPair of queries){
        const queryPairSplit = queryPair.indexOf('=');
        const key = queryPair.substring(0, queryPairSplit);
        const value = queryPair.substring(queryPairSplit + 1);
        const result = value?.split(',') ?? [];
        const isArray = Array.isArray(result);
        if (isArray) {
            for(let i = 0; i < result.length; i++){
                result[i] = decodeURIComponent(result[i]);
            }
        }
        // Don't store as array if there's only one value
        if (isArray && result.length === 1) {
            query[key] = result[0];
        } else {
            query[key] = result;
        }
    }
    return query;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3JvYm8uanMvcm9iby5qcy9wYWNrYWdlcy9wbHVnaW4tYXBpL3NyYy9jb3JlL3JvdXRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVSb3V0ZXIgfSBmcm9tICcuL3JhZGl4My5qcydcbmltcG9ydCB0eXBlIHsgUm91dGVIYW5kbGVyIH0gZnJvbSAnLi90eXBlcy5qcydcblxuaW50ZXJmYWNlIFJvdXRlIHtcblx0aGFuZGxlcjogUm91dGVIYW5kbGVyXG5cdHBhdGg6IHN0cmluZ1xufVxuXG5pbnRlcmZhY2UgUm91dGVSZXN1bHQge1xuXHRoYW5kbGVyOiBSb3V0ZUhhbmRsZXJcblx0cGFyYW1zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+XG5cdHBhdGg6IHN0cmluZ1xuXHRxdWVyeTogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgc3RyaW5nW10+XG59XG5cbmV4cG9ydCBjbGFzcyBSb3V0ZXIge1xuXHRwcml2YXRlIHJlYWRvbmx5IF9yb3V0ZXIgPSBjcmVhdGVSb3V0ZXIoKVxuXHRwcml2YXRlIHJlYWRvbmx5IF9yb3V0ZXM6IFJvdXRlW10gPSBbXVxuXG5cdGFkZFJvdXRlKHJvdXRlOiBSb3V0ZSkge1xuXHRcdHRoaXMuX3JvdXRlci5pbnNlcnQocm91dGUucGF0aCwgcm91dGUpXG5cdFx0dGhpcy5fcm91dGVzLnB1c2gocm91dGUpXG5cdH1cblxuXHRmaW5kKHBhdGg6IHN0cmluZyk6IFJvdXRlUmVzdWx0IHtcblx0XHQvLyBSZW1vdmUgcXVlcnkgcGFyYW1zIGZyb20gdGhlIHBhdGggdG8gYXZvaWQgcGFyYW0gaXNzdWVzLlxuXHRcdGNvbnN0IGhhc1F1ZXJ5ID0gcGF0aC5pbmNsdWRlcygnPycpXG5cdFx0Y29uc3Qgcm91dGUgPSB0aGlzLl9yb3V0ZXIubG9va3VwKGhhc1F1ZXJ5ID8gcGF0aC5zdWJzdHJpbmcoMCwgcGF0aC5pbmRleE9mKCc/JykpIDogcGF0aClcblxuXHRcdGlmICghcm91dGUpIHtcblx0XHRcdHJldHVybiBudWxsXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGhhbmRsZXI6IHJvdXRlLmhhbmRsZXIgYXMgUm91dGVIYW5kbGVyLFxuXHRcdFx0cGFyYW1zOiByb3V0ZS5wYXJhbXMgYXMgUmVjb3JkPHN0cmluZywgc3RyaW5nPixcblx0XHRcdHBhdGg6IHJvdXRlLnBhdGggYXMgc3RyaW5nLFxuXHRcdFx0cXVlcnk6IGhhc1F1ZXJ5ID8gcGFyc2VRdWVyeShwYXRoKSA6IHt9XG5cdFx0fVxuXHR9XG5cblx0cmVtb3ZlUm91dGUocGF0aDogc3RyaW5nKSB7XG5cdFx0dGhpcy5fcm91dGVyLnJlbW92ZShwYXRoKVxuXHRcdGNvbnN0IHJvdXRlSW5kZXggPSB0aGlzLl9yb3V0ZXMuZmluZEluZGV4KChyb3V0ZSkgPT4gcm91dGUucGF0aCA9PT0gcGF0aClcblx0XHR0aGlzLl9yb3V0ZXMuc3BsaWNlKHJvdXRlSW5kZXgsIDEpXG5cdH1cblxuXHRzdGF0cygpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0a2V5OiAncmFkaXgtcm91dGVyJyxcblx0XHRcdG51bVJvdXRlczogdGhpcy5fcm91dGVzLmxlbmd0aCxcblx0XHRcdHJvdXRlczogdGhpcy5fcm91dGVzXG5cdFx0fVxuXHR9XG59XG5cbmNvbnN0IHBhcnNlUXVlcnkgPSAocGF0aDogc3RyaW5nKTogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgc3RyaW5nW10+ID0+IHtcblx0Y29uc3QgcXVlcnk6IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IHN0cmluZ1tdPiA9IHt9XG5cblx0Ly8gUGFyc2Ugb3V0IHF1ZXJpZXMhXG5cdGNvbnN0IHF1ZXJpZXMgPSBwYXRoLnN1YnN0cmluZyhwYXRoLmluZGV4T2YoJz8nKSArIDEpLnNwbGl0KCcmJylcblx0Zm9yIChjb25zdCBxdWVyeVBhaXIgb2YgcXVlcmllcykge1xuXHRcdGNvbnN0IHF1ZXJ5UGFpclNwbGl0ID0gcXVlcnlQYWlyLmluZGV4T2YoJz0nKVxuXHRcdGNvbnN0IGtleSA9IHF1ZXJ5UGFpci5zdWJzdHJpbmcoMCwgcXVlcnlQYWlyU3BsaXQpXG5cdFx0Y29uc3QgdmFsdWUgPSBxdWVyeVBhaXIuc3Vic3RyaW5nKHF1ZXJ5UGFpclNwbGl0ICsgMSlcblx0XHRjb25zdCByZXN1bHQgPSB2YWx1ZT8uc3BsaXQoJywnKSA/PyBbXVxuXHRcdGNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHJlc3VsdClcblxuXHRcdGlmIChpc0FycmF5KSB7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRyZXN1bHRbaV0gPSBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0W2ldKVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIERvbid0IHN0b3JlIGFzIGFycmF5IGlmIHRoZXJlJ3Mgb25seSBvbmUgdmFsdWVcblx0XHRpZiAoaXNBcnJheSAmJiByZXN1bHQubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRxdWVyeVtrZXldID0gcmVzdWx0WzBdXG5cdFx0fSBlbHNlIHtcblx0XHRcdHF1ZXJ5W2tleV0gPSByZXN1bHRcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcXVlcnlcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVSb3V0ZXIiLCJSb3V0ZXIiLCJhZGRSb3V0ZSIsInJvdXRlIiwiX3JvdXRlciIsImluc2VydCIsInBhdGgiLCJfcm91dGVzIiwicHVzaCIsImZpbmQiLCJoYXNRdWVyeSIsImluY2x1ZGVzIiwibG9va3VwIiwic3Vic3RyaW5nIiwiaW5kZXhPZiIsImhhbmRsZXIiLCJwYXJhbXMiLCJxdWVyeSIsInBhcnNlUXVlcnkiLCJyZW1vdmVSb3V0ZSIsInJlbW92ZSIsInJvdXRlSW5kZXgiLCJmaW5kSW5kZXgiLCJzcGxpY2UiLCJzdGF0cyIsImtleSIsIm51bVJvdXRlcyIsImxlbmd0aCIsInJvdXRlcyIsInF1ZXJpZXMiLCJzcGxpdCIsInF1ZXJ5UGFpciIsInF1ZXJ5UGFpclNwbGl0IiwidmFsdWUiLCJyZXN1bHQiLCJpc0Fy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