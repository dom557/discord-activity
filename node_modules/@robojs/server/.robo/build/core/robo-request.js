const INTERNALS = Symbol('internal request');
/**
 * Extends the [Web Request API](https://developer.mozilla.org/docs/Web/API/Request) with additional convenience methods.
 */ export class RoboRequest extends Request {
    constructor(input, init = {}){
        const url = typeof input !== 'string' && 'url' in input ? input.url : String(input);
        validateURL(url);
        if (input instanceof Request) {
            super(input, init);
        } else {
            super(url, init);
        }
        this[INTERNALS] = {
            params: {},
            raw: {}
        };
    }
    get params() {
        return this[INTERNALS].params;
    }
    get query() {
        const url = new URL(this.url);
        const query = Object.fromEntries(url.searchParams.entries());
        return query;
    }
    get raw() {
        return this[INTERNALS].raw;
    }
    static async from(req, options) {
        const url = `${req.headers['x-forwarded-proto'] || 'http'}://${req.headers.host}${req.url}`;
        const method = req.method || 'GET';
        const headers = new Headers(req.headers);
        let body = options?.body;
        if (!options?.body && ![
            'GET',
            'HEAD'
        ].includes(method)) {
            body = await new Promise((resolve, reject)=>{
                const chunks = [];
                req.on('data', (chunk)=>chunks.push(chunk));
                req.on('end', ()=>resolve(Buffer.concat(chunks)));
                req.on('error', reject);
            });
        }
        const request = new RoboRequest(url, {
            body,
            headers,
            method
        });
        request[INTERNALS].raw = req;
        return request;
    }
}
export function applyParams(request, params) {
    request[INTERNALS].params = params;
}
export function validateURL(url) {
    try {
        return String(new URL(String(url)));
    } catch (error) {
        throw new Error(`URL is malformed "${String(url)}". Please use only absolute URLs`, {
            cause: error
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3JvYm8uanMvcm9iby5qcy9wYWNrYWdlcy9wbHVnaW4tYXBpL3NyYy9jb3JlL3JvYm8tcmVxdWVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEluY29taW5nTWVzc2FnZSB9IGZyb20gJ25vZGU6aHR0cCdcblxuY29uc3QgSU5URVJOQUxTID0gU3ltYm9sKCdpbnRlcm5hbCByZXF1ZXN0JylcblxuaW50ZXJmYWNlIEZyb21PcHRpb25zIHtcblx0Ym9keT86IEJ1ZmZlclxufVxuXG4vKipcbiAqIEV4dGVuZHMgdGhlIFtXZWIgUmVxdWVzdCBBUEldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0FQSS9SZXF1ZXN0KSB3aXRoIGFkZGl0aW9uYWwgY29udmVuaWVuY2UgbWV0aG9kcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFJvYm9SZXF1ZXN0IGV4dGVuZHMgUmVxdWVzdCB7XG5cdFtJTlRFUk5BTFNdOiB7XG5cdFx0cGFyYW1zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+XG5cdFx0cmF3OiBJbmNvbWluZ01lc3NhZ2Vcblx0fVxuXG5cdHByaXZhdGUgY29uc3RydWN0b3IoaW5wdXQ6IFJlcXVlc3RJbmZvIHwgVVJMLCBpbml0OiBSZXF1ZXN0SW5pdCA9IHt9KSB7XG5cdFx0Y29uc3QgdXJsID0gdHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJyAmJiAndXJsJyBpbiBpbnB1dCA/IGlucHV0LnVybCA6IFN0cmluZyhpbnB1dClcblx0XHR2YWxpZGF0ZVVSTCh1cmwpXG5cblx0XHRpZiAoaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG5cdFx0XHRzdXBlcihpbnB1dCwgaW5pdClcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3VwZXIodXJsLCBpbml0KVxuXHRcdH1cblxuXHRcdHRoaXNbSU5URVJOQUxTXSA9IHtcblx0XHRcdHBhcmFtczoge30sXG5cdFx0XHRyYXc6IHt9IGFzIEluY29taW5nTWVzc2FnZVxuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBnZXQgcGFyYW1zKCk6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4ge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMU10ucGFyYW1zXG5cdH1cblxuXHRwdWJsaWMgZ2V0IHF1ZXJ5KCk6IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IHN0cmluZ1tdPiB7XG5cdFx0Y29uc3QgdXJsID0gbmV3IFVSTCh0aGlzLnVybClcblx0XHRjb25zdCBxdWVyeSA9IE9iamVjdC5mcm9tRW50cmllcyh1cmwuc2VhcmNoUGFyYW1zLmVudHJpZXMoKSlcblx0XHRyZXR1cm4gcXVlcnlcblx0fVxuXG5cdHB1YmxpYyBnZXQgcmF3KCk6IEluY29taW5nTWVzc2FnZSB7XG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTXS5yYXdcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgYXN5bmMgZnJvbShyZXE6IEluY29taW5nTWVzc2FnZSwgb3B0aW9ucz86IEZyb21PcHRpb25zKTogUHJvbWlzZTxSb2JvUmVxdWVzdD4ge1xuXHRcdGNvbnN0IHVybCA9IGAke3JlcS5oZWFkZXJzWyd4LWZvcndhcmRlZC1wcm90byddIHx8ICdodHRwJ306Ly8ke3JlcS5oZWFkZXJzLmhvc3R9JHtyZXEudXJsfWBcblx0XHRjb25zdCBtZXRob2QgPSByZXEubWV0aG9kIHx8ICdHRVQnXG5cdFx0Y29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHJlcS5oZWFkZXJzIGFzIEhlYWRlcnNJbml0KVxuXHRcdGxldCBib2R5OiBCb2R5SW5pdCB8IG51bGwgPSBvcHRpb25zPy5ib2R5XG5cblx0XHRpZiAoIW9wdGlvbnM/LmJvZHkgJiYgIVsnR0VUJywgJ0hFQUQnXS5pbmNsdWRlcyhtZXRob2QpKSB7XG5cdFx0XHRib2R5ID0gYXdhaXQgbmV3IFByb21pc2U8QnVmZmVyPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRcdGNvbnN0IGNodW5rczogQnVmZmVyW10gPSBbXVxuXHRcdFx0XHRyZXEub24oJ2RhdGEnLCAoY2h1bmspID0+IGNodW5rcy5wdXNoKGNodW5rKSlcblx0XHRcdFx0cmVxLm9uKCdlbmQnLCAoKSA9PiByZXNvbHZlKEJ1ZmZlci5jb25jYXQoY2h1bmtzKSkpXG5cdFx0XHRcdHJlcS5vbignZXJyb3InLCByZWplY3QpXG5cdFx0XHR9KVxuXHRcdH1cblxuXHRcdGNvbnN0IHJlcXVlc3QgPSBuZXcgUm9ib1JlcXVlc3QodXJsLCB7IGJvZHksIGhlYWRlcnMsIG1ldGhvZCB9KVxuXHRcdHJlcXVlc3RbSU5URVJOQUxTXS5yYXcgPSByZXFcblxuXHRcdHJldHVybiByZXF1ZXN0XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5UGFyYW1zKHJlcXVlc3Q6IFJvYm9SZXF1ZXN0LCBwYXJhbXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pIHtcblx0cmVxdWVzdFtJTlRFUk5BTFNdLnBhcmFtcyA9IHBhcmFtc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVVUkwodXJsOiBzdHJpbmcgfCBVUkwpOiBzdHJpbmcge1xuXHR0cnkge1xuXHRcdHJldHVybiBTdHJpbmcobmV3IFVSTChTdHJpbmcodXJsKSkpXG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBVUkwgaXMgbWFsZm9ybWVkIFwiJHtTdHJpbmcodXJsKX1cIi4gUGxlYXNlIHVzZSBvbmx5IGFic29sdXRlIFVSTHNgLCB7IGNhdXNlOiBlcnJvciB9KVxuXHR9XG59XG4iXSwibmFtZXMiOlsiSU5URVJOQUxTIiwiU3ltYm9sIiwiUm9ib1JlcXVlc3QiLCJSZXF1ZXN0IiwiaW5wdXQiLCJpbml0IiwidXJsIiwiU3RyaW5nIiwidmFsaWRhdGVVUkwiLCJwYXJhbXMiLCJyYXciLCJxdWVyeSIsIlVSTCIsIk9iamVjdCIsImZyb21FbnRyaWVzIiwic2VhcmNoUGFyYW1zIiwiZW50cmllcyIsImZyb20iLCJyZXEiLCJvcHRpb25zIiwiaGVhZGVycyIsImhvc3QiLCJtZXRob2QiLCJIZWFkZXJzIiwiYm9keSIsImluY2x1ZGVzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJjaHVua3MiLCJvbiIsImNodW5rIiwicHVzaCIsIkJ1ZmZlciIsImNvbmNhdCIsInJlcXVlc3QiLCJhcHBseVBhcmFtcyIsImVycm9yIiwiRXJyb3IiLCJjYXVzZSJdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTUEsWUFBWUMsT0FBTztBQU16Qjs7Q0FFQyxHQUNELE9BQU8sTUFBTUMsb0JBQW9CQztJQU1oQyxZQUFvQkMsS0FBd0IsRUFBRUMsT0FBb0IsQ0FBQyxDQUFDLENBQUU7UUFDckUsTUFBTUMsTUFBTSxPQUFPRixVQUFVLFlBQVksU0FBU0EsUUFBUUEsTUFBTUUsR0FBRyxHQUFHQyxPQUFPSCxNQUFNO1FBQ25GSSxZQUFZRjtRQUVaLElBQUlGLGlCQUFpQkQsU0FBUztZQUM3QixLQUFLLENBQUNDLE9BQU9DO1FBQ2QsT0FBTztZQUNOLEtBQUssQ0FBQ0MsS0FBS0Q7UUFDWixDQUFDO1FBRUQsSUFBSSxDQUFDTCxVQUFVLEdBQUc7WUFDakJTLFFBQVEsQ0FBQztZQUNUQyxLQUFLLENBQUM7UUFDUDtJQUNEO0lBRUEsSUFBV0QsU0FBaUM7UUFDM0MsT0FBTyxJQUFJLENBQUNULFVBQVUsQ0FBQ1MsTUFBTTtJQUM5QjtJQUVBLElBQVdFLFFBQTJDO1FBQ3JELE1BQU1MLE1BQU0sSUFBSU0sSUFBSSxJQUFJLENBQUNOLEdBQUc7UUFDNUIsTUFBTUssUUFBUUUsT0FBT0MsV0FBVyxDQUFDUixJQUFJUyxZQUFZLENBQUNDLE9BQU87UUFDekQsT0FBT0w7SUFDUjtJQUVBLElBQVdELE1BQXVCO1FBQ2pDLE9BQU8sSUFBSSxDQUFDVixVQUFVLENBQUNVLEdBQUc7SUFDM0I7SUFFQSxhQUFvQk8sS0FBS0MsR0FBb0IsRUFBRUMsT0FBcUIsRUFBd0I7UUFDM0YsTUFBTWIsTUFBTSxDQUFDLEVBQUVZLElBQUlFLE9BQU8sQ0FBQyxvQkFBb0IsSUFBSSxPQUFPLEdBQUcsRUFBRUYsSUFBSUUsT0FBTyxDQUFDQyxJQUFJLENBQUMsRUFBRUgsSUFBSVosR0FBRyxDQUFDLENBQUM7UUFDM0YsTUFBTWdCLFNBQVNKLElBQUlJLE1BQU0sSUFBSTtRQUM3QixNQUFNRixVQUFVLElBQUlHLFFBQVFMLElBQUlFLE9BQU87UUFDdkMsSUFBSUksT0FBd0JMLFNBQVNLO1FBRXJDLElBQUksQ0FBQ0wsU0FBU0ssUUFBUSxDQUFDO1lBQUM7WUFBTztTQUFPLENBQUNDLFFBQVEsQ0FBQ0gsU0FBUztZQUN4REUsT0FBTyxNQUFNLElBQUlFLFFBQWdCLENBQUNDLFNBQVNDLFNBQVc7Z0JBQ3JELE1BQU1DLFNBQW1CLEVBQUU7Z0JBQzNCWCxJQUFJWSxFQUFFLENBQUMsUUFBUSxDQUFDQyxRQUFVRixPQUFPRyxJQUFJLENBQUNEO2dCQUN0Q2IsSUFBSVksRUFBRSxDQUFDLE9BQU8sSUFBTUgsUUFBUU0sT0FBT0MsTUFBTSxDQUFDTDtnQkFDMUNYLElBQUlZLEVBQUUsQ0FBQyxTQUFTRjtZQUNqQjtRQUNELENBQUM7UUFFRCxNQUFNTyxVQUFVLElBQUlqQyxZQUFZSSxLQUFLO1lBQUVrQjtZQUFNSjtZQUFTRTtRQUFPO1FBQzdEYSxPQUFPLENBQUNuQyxVQUFVLENBQUNVLEdBQUcsR0FBR1E7UUFFekIsT0FBT2lCO0lBQ1I7QUFDRCxDQUFDO0FBRUQsT0FBTyxTQUFTQyxZQUFZRCxPQUFvQixFQUFFMUIsTUFBOEIsRUFBRTtJQUNqRjBCLE9BQU8sQ0FBQ25DLFVBQVUsQ0FBQ1MsTUFBTSxHQUFHQTtBQUM3QixDQUFDO0FBRUQsT0FBTyxTQUFTRCxZQUFZRixHQUFpQixFQUFVO0lBQ3RELElBQUk7UUFDSCxPQUFPQyxPQUFPLElBQUlLLElBQUlMLE9BQU9EO0lBQzlCLEVBQUUsT0FBTytCLE9BQU87UUFDZixNQUFNLElBQUlDLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRS9CLE9BQU9ELEtBQUssZ0NBQWdDLENBQUMsRUFBRTtZQUFFaUMsT0FBT0Y7UUFBTSxHQUFFO0lBQ3RHO0FBQ0QsQ0FBQyJ9