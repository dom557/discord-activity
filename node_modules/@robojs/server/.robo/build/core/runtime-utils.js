import { readFile } from "node:fs/promises";
import path from "node:path";
/**
 * Get the package manager used to run this CLI
 * This allows developers to use their preferred package manager seamlessly
 */ export function getPackageManager() {
    const userAgent = process.env.npm_config_user_agent;
    if (userAgent?.startsWith('bun')) {
        return 'bun';
    } else if (userAgent?.startsWith('yarn')) {
        return 'yarn';
    } else if (userAgent?.startsWith('pnpm')) {
        return 'pnpm';
    } else {
        return 'npm';
    }
}
/**
 * Get the "npx" or equivalent for the current package manager
 */ export function getPackageExecutor() {
    const packageManager = getPackageManager();
    if (packageManager === 'yarn') {
        return 'yarn dlx';
    } else if (packageManager === 'pnpm') {
        return 'pnpx';
    } else if (packageManager === 'bun') {
        return 'bunx';
    } else {
        return 'npx';
    }
}
export const IS_BUN = getPackageManager() === 'bun';
/**
 * Reads the package.json file and returns whether the given dependency is installed.
 */ export async function hasDependency(name, dev = false) {
    try {
        const packageJsonPath = path.join(process.cwd(), 'package.json');
        const packageJson = JSON.parse(await readFile(packageJsonPath, 'utf-8'));
        if (dev) {
            return !!packageJson.devDependencies?.[name];
        }
        return !!packageJson.dependencies?.[name];
    } catch  {
        return false;
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3JvYm8uanMvcm9iby5qcy9wYWNrYWdlcy9wbHVnaW4tYXBpL3NyYy9jb3JlL3J1bnRpbWUtdXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVhZEZpbGUgfSBmcm9tICdub2RlOmZzL3Byb21pc2VzJ1xuaW1wb3J0IHBhdGggZnJvbSAnbm9kZTpwYXRoJ1xuXG5leHBvcnQgdHlwZSBQYWNrYWdlTWFuYWdlciA9ICducG0nIHwgJ2J1bicgfCAncG5wbScgfCAneWFybidcblxuLyoqXG4gKiBHZXQgdGhlIHBhY2thZ2UgbWFuYWdlciB1c2VkIHRvIHJ1biB0aGlzIENMSVxuICogVGhpcyBhbGxvd3MgZGV2ZWxvcGVycyB0byB1c2UgdGhlaXIgcHJlZmVycmVkIHBhY2thZ2UgbWFuYWdlciBzZWFtbGVzc2x5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYWNrYWdlTWFuYWdlcigpOiBQYWNrYWdlTWFuYWdlciB7XG5cdGNvbnN0IHVzZXJBZ2VudCA9IHByb2Nlc3MuZW52Lm5wbV9jb25maWdfdXNlcl9hZ2VudFxuXG5cdGlmICh1c2VyQWdlbnQ/LnN0YXJ0c1dpdGgoJ2J1bicpKSB7XG5cdFx0cmV0dXJuICdidW4nXG5cdH0gZWxzZSBpZiAodXNlckFnZW50Py5zdGFydHNXaXRoKCd5YXJuJykpIHtcblx0XHRyZXR1cm4gJ3lhcm4nXG5cdH0gZWxzZSBpZiAodXNlckFnZW50Py5zdGFydHNXaXRoKCdwbnBtJykpIHtcblx0XHRyZXR1cm4gJ3BucG0nXG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuICducG0nXG5cdH1cbn1cblxuLyoqXG4gKiBHZXQgdGhlIFwibnB4XCIgb3IgZXF1aXZhbGVudCBmb3IgdGhlIGN1cnJlbnQgcGFja2FnZSBtYW5hZ2VyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYWNrYWdlRXhlY3V0b3IoKTogc3RyaW5nIHtcblx0Y29uc3QgcGFja2FnZU1hbmFnZXIgPSBnZXRQYWNrYWdlTWFuYWdlcigpXG5cdGlmIChwYWNrYWdlTWFuYWdlciA9PT0gJ3lhcm4nKSB7XG5cdFx0cmV0dXJuICd5YXJuIGRseCdcblx0fSBlbHNlIGlmIChwYWNrYWdlTWFuYWdlciA9PT0gJ3BucG0nKSB7XG5cdFx0cmV0dXJuICdwbnB4J1xuXHR9IGVsc2UgaWYgKHBhY2thZ2VNYW5hZ2VyID09PSAnYnVuJykge1xuXHRcdHJldHVybiAnYnVueCdcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gJ25weCdcblx0fVxufVxuXG5leHBvcnQgY29uc3QgSVNfQlVOID0gZ2V0UGFja2FnZU1hbmFnZXIoKSA9PT0gJ2J1bidcblxuLyoqXG4gKiBSZWFkcyB0aGUgcGFja2FnZS5qc29uIGZpbGUgYW5kIHJldHVybnMgd2hldGhlciB0aGUgZ2l2ZW4gZGVwZW5kZW5jeSBpcyBpbnN0YWxsZWQuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYXNEZXBlbmRlbmN5KG5hbWU6IHN0cmluZywgZGV2ID0gZmFsc2UpOiBQcm9taXNlPGJvb2xlYW4+IHtcblx0dHJ5IHtcblx0XHRjb25zdCBwYWNrYWdlSnNvblBhdGggPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3BhY2thZ2UuanNvbicpXG5cdFx0Y29uc3QgcGFja2FnZUpzb24gPSBKU09OLnBhcnNlKGF3YWl0IHJlYWRGaWxlKHBhY2thZ2VKc29uUGF0aCwgJ3V0Zi04JykpXG5cblx0XHRpZiAoZGV2KSB7XG5cdFx0XHRyZXR1cm4gISFwYWNrYWdlSnNvbi5kZXZEZXBlbmRlbmNpZXM/LltuYW1lXVxuXHRcdH1cblxuXHRcdHJldHVybiAhIXBhY2thZ2VKc29uLmRlcGVuZGVuY2llcz8uW25hbWVdXG5cdH0gY2F0Y2gge1xuXHRcdHJldHVybiBmYWxzZVxuXHR9XG59XG4iXSwibmFtZXMiOlsicmVhZEZpbGUiLCJwYXRoIiwiZ2V0UGFja2FnZU1hbmFnZXIiLCJ1c2VyQWdlbnQiLCJwcm9jZXNzIiwiZW52IiwibnBtX2NvbmZpZ191c2VyX2FnZW50Iiwic3RhcnRzV2l0aCIsImdldFBhY2thZ2VFeGVjdXRvciIsInBhY2thZ2VNYW5hZ2VyIiwiSVNfQlVOIiwiaGFzRGVwZW5kZW5jeSIsIm5hbWUiLCJkZXYiLCJwYWNrYWdlSnNvblBhdGgiLCJqb2luIiwiY3dkIiwicGFja2FnZUpzb24iLCJKU09OIiwicGFyc2UiLCJkZXZEZXBlbmRlbmNpZXMiLCJkZXBlbmRlbmNpZXMiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLFFBQVEsUUFBUSxtQkFBa0I7QUFDM0MsT0FBT0MsVUFBVSxZQUFXO0FBSTVCOzs7Q0FHQyxHQUNELE9BQU8sU0FBU0Msb0JBQW9DO0lBQ25ELE1BQU1DLFlBQVlDLFFBQVFDLEdBQUcsQ0FBQ0MscUJBQXFCO0lBRW5ELElBQUlILFdBQVdJLFdBQVcsUUFBUTtRQUNqQyxPQUFPO0lBQ1IsT0FBTyxJQUFJSixXQUFXSSxXQUFXLFNBQVM7UUFDekMsT0FBTztJQUNSLE9BQU8sSUFBSUosV0FBV0ksV0FBVyxTQUFTO1FBQ3pDLE9BQU87SUFDUixPQUFPO1FBQ04sT0FBTztJQUNSLENBQUM7QUFDRixDQUFDO0FBRUQ7O0NBRUMsR0FDRCxPQUFPLFNBQVNDLHFCQUE2QjtJQUM1QyxNQUFNQyxpQkFBaUJQO0lBQ3ZCLElBQUlPLG1CQUFtQixRQUFRO1FBQzlCLE9BQU87SUFDUixPQUFPLElBQUlBLG1CQUFtQixRQUFRO1FBQ3JDLE9BQU87SUFDUixPQUFPLElBQUlBLG1CQUFtQixPQUFPO1FBQ3BDLE9BQU87SUFDUixPQUFPO1FBQ04sT0FBTztJQUNSLENBQUM7QUFDRixDQUFDO0FBRUQsT0FBTyxNQUFNQyxTQUFTUix3QkFBd0IsTUFBSztBQUVuRDs7Q0FFQyxHQUNELE9BQU8sZUFBZVMsY0FBY0MsSUFBWSxFQUFFQyxNQUFNLEtBQUssRUFBb0I7SUFDaEYsSUFBSTtRQUNILE1BQU1DLGtCQUFrQmIsS0FBS2MsSUFBSSxDQUFDWCxRQUFRWSxHQUFHLElBQUk7UUFDakQsTUFBTUMsY0FBY0MsS0FBS0MsS0FBSyxDQUFDLE1BQU1uQixTQUFTYyxpQkFBaUI7UUFFL0QsSUFBSUQsS0FBSztZQUNSLE9BQU8sQ0FBQyxDQUFDSSxZQUFZRyxlQUFlLEVBQUUsQ0FBQ1IsS0FBSztRQUM3QyxDQUFDO1FBRUQsT0FBTyxDQUFDLENBQUNLLFlBQVlJLFlBQVksRUFBRSxDQUFDVCxLQUFLO0lBQzFDLEVBQUUsT0FBTTtRQUNQLE9BQU8sS0FBSztJQUNiO0FBQ0QsQ0FBQyJ9