import { color } from '../core/color.js';
import { logger } from '../core/logger.js';
import { getRoboPackageJson, packageJson } from '../cli/utils/utils.js';
import { mkdirSync } from 'node:fs';
import os from 'node:os';
import path from 'node:path';
import { unlink, readFile, writeFile } from 'node:fs/promises';

const RoboPlaySession = {
  clear,
  get,
  link,
  save
};
async function clear() {
  const sessionPath = path.join(os.homedir(), ".robo", "roboplay", "session.json");
  logger.debug(`Clearing session file at ${sessionPath}`);
  await unlink(sessionPath);
}
async function get() {
  const sessionPath = path.join(os.homedir(), ".robo", "roboplay", "session.json");
  logger.debug(`Reading RoboPlay session file at ${sessionPath}`);
  try {
    const sessionData = await readFile(sessionPath, "utf-8");
    const session = JSON.parse(sessionData);
    if (isUnsupportedSessionData(session)) {
      logger.info(`Session data is out of date. Clearing...`);
      await clear();
      return null;
    }
    return session;
  } catch (error) {
    logger.debug(`No RoboPlay session found.`);
    return null;
  }
}
function isUnsupportedSessionData(session) {
  if (!session.roboVersion) {
    return true;
  }
  return false;
}
async function link(podId) {
  const session = await get();
  if (!session) {
    throw new Error(`No RoboPlay session found. Please sign in with ${color.bold("robo login")}.`);
  }
  const pod = session.pods.find((pod2) => pod2.id === podId);
  if (!pod) {
    throw new Error(`No Pod found with ID ${color.bold(podId)}.`);
  }
  const packageJson2 = await getRoboPackageJson();
  if (!packageJson2.dependencies?.["robo.js"]) {
    throw new Error(`This directory is not a Robo project.`);
  }
  logger.debug(`Linking ${process.cwd()} to Pod ${podId}...`);
  session.linkedProjects[process.cwd()] = {
    podId,
    roboId: null
  };
  await save(session);
}
async function save(session) {
  const sessionPath = path.join(os.homedir(), ".robo", "roboplay", "session.json");
  logger.debug(`Writing session file to ${sessionPath}`);
  mkdirSync(path.dirname(sessionPath), { recursive: true });
  await writeFile(
    sessionPath,
    JSON.stringify(
      {
        roboVersion: packageJson.version,
        ...session
      },
      null,
      2
    )
  );
  logger.debug(`Session file written successfully!`);
}

export { RoboPlaySession };
