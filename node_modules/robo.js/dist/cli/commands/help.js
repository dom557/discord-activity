import { color } from '../../core/color.js';
import { Command } from '../utils/cli-handler.js';
import { logger } from '../../core/logger.js';
import rootCommand from '../index.js';
import { packageJson } from '../utils/utils.js';

const command = new Command("help").description("Shows this help menu").handler(helpCommandHandler);
var help_default = command;
function helpCommandHandler() {
  logger.log(
    color.bold(`
 ${color.blue("Robo.js")} - Where bot creation meets endless possibilities!`),
    color.dim("(v" + packageJson.version + ")\n\n")
  );
  const groups = splitCommandsIntoGroups([
    ["dev", "start", "build"],
    ["add", "remove", "upgrade"],
    ["deploy", "doctor", "invite", "why"],
    ["help"]
  ]);
  prettyPrint(formatCommand(groups));
}
function splitCommandsIntoGroups(commandNames) {
  const commands = rootCommand.getChildCommands().map((command2) => command2);
  let groupId = 0;
  const orderedCommands = [];
  for (const commandName of commandNames) {
    ++groupId;
    const commandAndGroupId = commandName.map((commandName2) => {
      const command2 = commands.filter((cmd) => cmd.getName() === commandName2);
      if (command2.length <= 0) {
        logger.error(color.red(`The ${commandName2} command doesn't exist
`));
        return;
      }
      return {
        groupId,
        command: command2[0]
      };
    });
    orderedCommands.push(...commandAndGroupId);
  }
  return orderedCommands;
}
function prettyPrint(commands) {
  let commandNameStringLength = 0;
  let commandOptionsStringLength = 0;
  for (let i = 0; i < commands.length; ++i) {
    if (commandNameStringLength < commands[i].name.length) {
      commandNameStringLength = commands[i].name.length;
    }
    if (commandOptionsStringLength < commands[i].flags.length) {
      commandOptionsStringLength = commands[i].flags.length;
    }
  }
  for (let i = 0; i < commands.length; ++i) {
    const command2 = commands[i];
    const spacesBetweenNameAndFlags = calcSpacing(commandNameStringLength, command2.name.length);
    const spaceBetweenFlagsAndDesc = calcSpacing(commandOptionsStringLength, command2.flags.length);
    const spacingFlag = " ".repeat(spacesBetweenNameAndFlags + 5);
    const spacingDesc = " ".repeat(spaceBetweenFlagsAndDesc + 5);
    const commandLine = `${" " + command2.name}${spacingFlag + command2.flags}${spacingDesc + command2.description}`;
    const lineBreakSpacesCount = command2.name.length + spacingFlag.length + command2.flags.length + spacingDesc.length + 1;
    let nameColor = color.blue;
    if (command2.groupId === 2) {
      nameColor = color.green;
    } else if (command2.groupId === 3) {
      nameColor = color.magenta;
    } else if (command2.groupId >= 4) {
      nameColor = color.cyan;
    }
    logger.log(
      nameColor(color.bold(" " + command2.name)),
      color.dim(spacingFlag + command2.flags),
      color.white(spacingDesc + command2.description.slice(0, 68))
    );
    if (commandLine.length >= 105) {
      breakLine(command2.description, lineBreakSpacesCount, 70);
    }
  }
  logger.log("\n");
  logger.log(
    color.white(" Learn more about Robo.js:"),
    color.underline(color.italic(color.cyan("https://roboplay.dev/docs")))
  );
  logger.log(
    color.white(" Join our official Discord server:"),
    color.underline(color.italic(color.cyan("https://roboplay.dev/discord"))),
    "\n"
  );
}
function calcSpacing(longestCommandName, commandNameLength) {
  let y = 0;
  if (commandNameLength === longestCommandName) {
    return y;
  }
  for (let i = commandNameLength; i < longestCommandName; ++i) {
    ++y;
  }
  return y;
}
function breakLine(desc, lineBreakSpaces, charactersToDivideInto) {
  const numberOfDividedLines = Math.floor(desc.length / charactersToDivideInto);
  let d = 140;
  for (let i = 0; i < numberOfDividedLines; ++i) {
    if (i === numberOfDividedLines) {
      logger.log(" ".repeat(lineBreakSpaces), " " + desc.slice(d).trim());
      logger.log("\n");
      return;
    } else if (d === 140) {
      logger.log(" ".repeat(lineBreakSpaces), " " + desc.slice(68, 140).trim());
    } else {
      logger.log(" ".repeat(lineBreakSpaces), " " + desc.slice(d - 70, d).trim());
    }
    d += 70;
  }
}
function formatCommand(commandGroup) {
  const formattedCommands = [];
  commandGroup.forEach((commandObject, idx) => {
    if (!commandObject?.command)
      return;
    const childCommands = commandObject.command.getChildCommands();
    const alias = commandObject.command.getOptions().map((flags) => `${flags.alias}`).join(" ");
    const lastCommandInTheGroup = () => {
      if (commandGroup[idx + 1] !== void 0 && commandGroup[idx + 1].groupId !== commandObject.groupId) {
        return `${commandObject.command.getDescription()}

`;
      } else {
        return commandObject.command.getDescription();
      }
    };
    childCommands.forEach((childCommand) => {
      formattedCommands.push({
        groupId: commandObject.groupId,
        name: `${commandObject.command.getName()} ${childCommand.getName()}`,
        flags: alias,
        description: childCommand.getDescription()
      });
    });
    formattedCommands.push({
      groupId: commandObject.groupId,
      name: commandObject.command.getName(),
      flags: alias,
      description: lastCommandInTheGroup()
    });
  });
  return formattedCommands;
}

export { help_default as default, helpCommandHandler };
