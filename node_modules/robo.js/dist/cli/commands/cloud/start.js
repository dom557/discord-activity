import { Command } from '../../utils/cli-handler.js';
import { composeColors, color } from '../../../core/color.js';
import { logger } from '../../../core/logger.js';
import { RoboPlaySession } from '../../../roboplay/session.js';
import { RoboPlay } from '../../../roboplay/client.js';

const command = new Command("start").description("Start your Robo Pod.").option("-s", "--silent", "do not print anything").option("-v", "--verbose", "print more information for debugging").option("-h", "--help", "Shows the available command options").handler(startAction);
var start_default = command;
async function startAction(_args, options) {
  logger({
    enabled: !options.silent,
    level: options.verbose ? "debug" : "info"
  });
  const session = await RoboPlaySession.get();
  if (!session) {
    logger.error(
      `You must be logged in to deploy to RoboPlay. Run ${composeColors(
        color.bold,
        color.cyan
      )("robo login")} to get started.`
    );
    return;
  }
  const link = session.linkedProjects[process.cwd()];
  if (!link?.podId) {
    logger.error(
      `This project is not linked to a Robo Pod. Run ${composeColors(
        color.bold,
        color.cyan
      )("robo login")} again to fix this.`
    );
    return;
  }
  const pod = session.pods.find((pod2) => pod2.id === link.podId);
  logger.info(`Starting Pod ${composeColors(color.bold, color.cyan)(pod.name)}...`);
  const result = await RoboPlay.Pod.start({
    bearerToken: session.userToken,
    podId: pod.id
  });
  if (!result.success) {
    logger.debug(`Failed to start Pod ${composeColors(color.bold, color.cyan)(pod.name)}.`);
    logger.error(result.error);
    return;
  }
  logger.info(`Successfully started Pod ${composeColors(color.bold, color.cyan)(pod.name)}.`);
}

export { start_default as default };
