import fs from 'node:fs/promises';
import path from 'node:path';
import { color } from '../../core/color.js';
import { loadConfig } from '../../core/config.js';
import { logger } from '../../core/logger.js';
import { Command } from '../utils/cli-handler.js';
import { createRequire } from 'node:module';
import { exec } from '../utils/utils.js';
import { getPackageManager } from '../utils/runtime-utils.js';

const require2 = createRequire(import.meta.url);
const command = new Command("remove").description("Removes a plugin from your Robo").option("-f", "--force", "forcefully remove & unregister packages").option("-s", "--silent", "do not print anything").option("-v", "--verbose", "print more information for debugging").positionalArgs(true).handler(removeAction);
var remove_default = command;
async function removeAction(packages, options) {
  logger({
    enabled: !options.silent,
    level: options.verbose ? "debug" : "info"
  }).info(`Removing ${packages.length} plugin${packages.length === 1 ? "" : "s"}...`);
  logger.debug(`Removing plugins:`, packages);
  logger.debug(`Current working directory:`, process.cwd());
  const startTime = Date.now();
  if (packages.length === 0) {
    logger.error(`No packages specified. Use ${color.bold("robo remove <package>")} to remove a plugin.`);
    return;
  }
  const config = await loadConfig();
  const pendingRegistration = packages.filter((pkg) => {
    return options.force || config.plugins?.includes(pkg) || config.plugins?.find((p) => Array.isArray(p) && p[0] === pkg);
  });
  logger.debug(`Pending registration remove:`, pendingRegistration);
  const packageJsonPath = path.join(process.cwd(), "package.json");
  const packageJson = require2(packageJsonPath);
  const pendingUninstall = packages.filter((pkg) => {
    return options.force || Object.keys(packageJson.dependencies ?? {})?.includes(pkg);
  });
  logger.debug(`Pending installation remove:`, pendingUninstall);
  if (pendingUninstall.length > 0) {
    const packageManager = getPackageManager();
    const command2 = packageManager === "npm" ? "uninstall" : "remove";
    logger.debug(`Using package manager:`, packageManager);
    try {
      await exec(`${packageManager} ${command2} ${pendingUninstall.join(" ")}`, {
        stdio: options.force ? "inherit" : "ignore"
      });
      logger.debug(`Successfully uninstalled packages!`);
    } catch (error) {
      logger.error(`Failed to uninstall packages:`, error);
      if (!options.force) {
        return;
      }
    }
  }
  await Promise.all(
    pendingRegistration.map(async (pkg) => {
      return removePluginConfig(pkg);
    })
  );
  logger.info(`Successfully completed in ${Date.now() - startTime}ms`);
}
async function removePluginConfig(pluginName) {
  const pluginParts = pluginName.replace(/^@/, "").split("/");
  const pluginPath = path.join(process.cwd(), "config", "plugins", ...pluginParts) + ".mjs";
  logger.debug(`Deleting ${pluginName} config from ${pluginPath}...`);
  await fs.rm(pluginPath, {
    force: true
  });
}

export { remove_default as default, removeAction };
