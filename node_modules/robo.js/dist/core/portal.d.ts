import { Collection } from 'discord.js';
import { HandlerRecord, Api, Command, Context, Event, Middleware } from '../types/index.js';
import 'node:http';
import './logger.js';

declare class Portal {
    apis: Collection<string, HandlerRecord<Api>>;
    commands: Collection<string, HandlerRecord<Command>>;
    context: Collection<string, HandlerRecord<Context>>;
    events: Collection<string, HandlerRecord<Event>[]>;
    middleware: HandlerRecord<Middleware>[];
    moduleKeys: Set<string>;
    private _enabledModules;
    private _modules;
    constructor(apis: Collection<string, HandlerRecord<Api>>, commands: Collection<string, HandlerRecord<Command>>, context: Collection<string, HandlerRecord<Context>>, events: Collection<string, HandlerRecord<Event>[]>, middleware: HandlerRecord<Middleware>[]);
    module(moduleName: string): Module;
    /**
     * Creates a new Portal instance from the manifest file.
     *
     * Warning: Do not call this method directly. Use the `portal` export instead.
     */
    static open(): Promise<Portal>;
}
declare class Module {
    private _moduleName;
    private _enabledModules;
    constructor(_moduleName: string, _enabledModules: Record<string, boolean>);
    get isEnabled(): boolean;
    setEnabled(value: boolean): void;
}
/**
 * Gets the config options for a specific plugin package.
 *
 * @param packageName The name of the package to get the options for.
 * @returns The options for the package, or null if the package is not installed nor configured.
 */
declare function getPluginOptions(packageName: string): unknown | null;

export { Portal as default, getPluginOptions };
