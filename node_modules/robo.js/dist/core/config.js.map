{"version":3,"sources":["../../src/core/config.ts"],"names":["logger","fs","path","pathToFileURL","_config","_configPaths","getConfig","getConfigPaths","loadConfig","file","configPath","loadConfigPath","config","read","scanPlugins","plugin","pluginConfig","pluginPath","existingIndex","p","extensions","prefixes","prefix","ext","fullPath","callback","pluginsPath","plugins","scopedPlugins","scopedPlugin","scopedPath","pluginName","importConfigFile","basePath","resolvedPath","e","rawData","imported"],"mappings":"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","sourcesContent":["import { Config } from '../types/index.js'\nimport { logger } from './logger.js'\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport { pathToFileURL } from 'node:url'\n\n// Global config reference\nlet _config: Config = null\nconst _configPaths: Set<string> = new Set()\n\n/**\n * Returns the currently loaded configuration.\n * May return null if config has yet to load. Use {@link loadConfig} to load it first.\n */\nexport function getConfig(): Config | null {\n\treturn _config\n}\n\n/**\n * Returns the paths to all loaded configuration files.\n */\nexport function getConfigPaths(): Set<string> {\n\treturn _configPaths\n}\n\nexport async function loadConfig(file = 'robo'): Promise<Config> {\n\tconst configPath = await loadConfigPath(file)\n\tlet config: Config\n\n\tif (configPath) {\n\t\tconfig = await read<Config>(configPath)\n\t\t_configPaths.add(configPath)\n\n\t\t// Load plugin files when using \"/config\" directory\n\t\tif (configPath.includes(path.sep + 'config' + path.sep)) {\n\t\t\tlogger.debug('Scanning for plugin files...')\n\t\t\tconfig.plugins = config.plugins ?? []\n\n\t\t\tawait scanPlugins(configPath, (plugin, pluginConfig, pluginPath) => {\n\t\t\t\t// Remove existing plugin config if it exists\n\t\t\t\tconst existingIndex = config.plugins?.findIndex((p) => p === plugin || p[0] === plugin)\n\t\t\t\tif (existingIndex !== -1) {\n\t\t\t\t\tconfig.plugins?.splice(existingIndex, 1)\n\t\t\t\t}\n\n\t\t\t\tconfig.plugins?.push([plugin, pluginConfig])\n\t\t\t\t_configPaths.add(pluginPath)\n\t\t\t})\n\t\t}\n\t} else {\n\t\tconfig = {\n\t\t\tclientOptions: {\n\t\t\t\tintents: []\n\t\t\t}\n\t\t}\n\t}\n\n\t_config = config\n\tlogger.debug(`Loaded configuration file:`, config)\n\treturn config\n}\n\n/**\n * Looks for the config file in the current project.\n * Will look for the following files in order:\n * - config/robo.mjs\n * - config/robo.cjs\n * - config/robo.json\n * - .config/robo.mjs\n * - .config/robo.cjs\n * - .config/robo.json\n *\n * @param file The name of the config file to look for. Defaults to \"robo\".\n * @returns The path to the config file, or null if it could not be found.\n */\nexport async function loadConfigPath(file = 'robo'): Promise<string> {\n\tconst extensions = ['.mjs', '.cjs', '.json']\n\tconst prefixes = ['config' + path.sep, '.config' + path.sep]\n\n\tfor (const prefix of prefixes) {\n\t\tfor (const ext of extensions) {\n\t\t\tconst fullPath = path.join(process.cwd(), `${prefix}${file}${ext}`)\n\n\t\t\ttry {\n\t\t\t\tif (fs.existsSync(fullPath)) {\n\t\t\t\t\t// Convert to file URL to allow for dynamic import()\n\t\t\t\t\tlogger.debug(`Found configuration file at`, fullPath)\n\t\t\t\t\treturn fullPath\n\t\t\t\t}\n\t\t\t} catch (ignored) {\n\t\t\t\t// empty\n\t\t\t}\n\t\t}\n\t}\n\n\t// If no config file was found, return null\n\treturn null\n}\n\n/**\n * Scans the /plugins config subdirectory for plugins.\n *\n * @param callback A callback function to be called for each plugin found. The plugin name will be passed as the first argument, including the scoped organization if applicable. Second parameter is the plugin config object.\n */\nasync function scanPlugins(\n\tconfigPath: string,\n\tcallback: (plugin: string, pluginConfig: unknown, pluginPath: string) => void\n) {\n\t// Look for plugins in the same directory as the config file\n\tconst pluginsPath = path.join(path.dirname(configPath), 'plugins')\n\n\tif (!fs.existsSync(pluginsPath)) {\n\t\treturn\n\t}\n\n\t// For each file in the plugins directory, import it and add it to the config\n\tconst plugins = fs.readdirSync(pluginsPath)\n\n\tfor (const plugin of plugins) {\n\t\tconst pluginPath = path.join(pluginsPath, plugin)\n\n\t\t// Load subdirectories as scoped plugins\n\t\tif (fs.statSync(pluginPath).isDirectory()) {\n\t\t\tconst scopedPlugins = fs.readdirSync(pluginPath)\n\n\t\t\tfor (const scopedPlugin of scopedPlugins) {\n\t\t\t\tconst scopedPath = path.join(pluginPath, scopedPlugin)\n\t\t\t\tconst [pluginName, pluginConfig] = await importConfigFile(scopedPath, pluginsPath)\n\t\t\t\tcallback('@' + pluginName, pluginConfig, scopedPath)\n\t\t\t}\n\t\t} else {\n\t\t\tconst [pluginName, pluginConfig] = await importConfigFile(pluginPath, pluginsPath)\n\t\t\tcallback(pluginName, pluginConfig, pluginPath)\n\t\t}\n\t}\n}\n\nasync function importConfigFile(configPath: string, basePath?: string): Promise<[string, unknown]> {\n\t// Compute the file name, keeping the base path in mind for scoped config files\n\tlet resolvedPath: string\n\n\tif (basePath) {\n\t\tresolvedPath = path.relative(basePath, configPath)\n\t} else {\n\t\tresolvedPath = path.basename(configPath)\n\t}\n\n\t// Remove file extension and try to load file contents\n\tconst pluginName = resolvedPath.split('.')[0]\n\n\ttry {\n\t\tconst pluginConfig = await read(configPath)\n\t\treturn [pluginName, pluginConfig]\n\t} catch (e) {\n\t\tlogger.debug(`Failed to load plugin configuration file for ${pluginName}:`, e)\n\t\treturn [pluginName, {}]\n\t}\n}\n\nasync function read<T = unknown>(configPath: string): Promise<T> {\n\t// If the file is a JSON file, handle it differently\n\tif (configPath.endsWith('.json')) {\n\t\ttry {\n\t\t\tconst rawData = fs.readFileSync(configPath, 'utf8')\n\t\t\tconst pluginConfig = JSON.parse(rawData)\n\t\t\treturn pluginConfig ?? {}\n\t\t} catch (e) {\n\t\t\treturn {} as T\n\t\t}\n\t} else {\n\t\ttry {\n\t\t\t// Convert to file URL to allow for a seamless dynamic import()\n\t\t\tconst imported = await import(pathToFileURL(configPath).toString())\n\t\t\tconst pluginConfig = imported.default ?? imported\n\t\t\treturn pluginConfig ?? {}\n\t\t} catch (e) {\n\t\t\tlogger.error(e)\n\t\t\treturn {} as T\n\t\t}\n\t}\n}\n"]}