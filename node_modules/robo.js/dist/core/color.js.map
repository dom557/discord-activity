{"version":3,"sources":["../../src/core/color.ts"],"names":["tty","env","argv","platform","isDisabled","isForced","isWindows","isDumbTerminal","isCompatibleTerminal","isCI","isColorSupported","replaceClose","index","string","close","replace","head","tail","next","clearBleed","open","filterEmpty","at","hexToRgb","hex","match","init","openStr","closeStr","color","composeColors","fns","s","acc","fn","rgb","createColors","useColor","colors","key","reset","bold","dim","italic","underline","inverse","hidden","strikethrough","black","red","green","yellow","blue","magenta","cyan","white","gray","bgBlack","bgRed","bgGreen","bgYellow","bgBlue","bgMagenta","bgCyan","bgWhite","blackBright","redBright","greenBright","yellowBright","blueBright","magentaBright","cyanBright"],"mappings":"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","sourcesContent":["/**\n * This was forked from Colorette (MIT License)\n * https://github.com/jorgebucaran/colorette\n *\n * It was done to minimize size and remove unnecessary features.\n */\nimport tty from 'node:tty'\n\nconst { env = {}, argv = [], platform = '' } = typeof process === 'undefined' ? {} : process\n\nconst isDisabled: boolean = 'NO_COLOR' in env || argv.includes('--no-color')\nconst isForced: boolean = 'FORCE_COLOR' in env || argv.includes('--color')\nconst isWindows: boolean = platform === 'win32'\nconst isDumbTerminal: boolean = env.TERM === 'dumb'\n\nconst isCompatibleTerminal: boolean = tty && tty.isatty && tty.isatty(1) && env.TERM && !isDumbTerminal\n\nconst isCI: boolean = 'CI' in env && ('GITHUB_ACTIONS' in env || 'GITLAB_CI' in env || 'CIRCLECI' in env)\n\nexport const isColorSupported: boolean =\n\t!isDisabled && (isForced || (isWindows && !isDumbTerminal) || isCompatibleTerminal || isCI)\n\nconst replaceClose = (\n\tindex: number,\n\tstring: string,\n\tclose: string,\n\treplace: string,\n\thead: string = string.substring(0, index) + replace,\n\ttail: string = string.substring(index + close.length),\n\tnext: number = tail.indexOf(close)\n): string => head + (next < 0 ? tail : replaceClose(next, tail, close, replace))\n\nconst clearBleed = (index: number, string: string, open: string, close: string, replace: string): string =>\n\tindex < 0 ? open + string + close : open + replaceClose(index, string, close, replace) + close\n\nconst filterEmpty =\n\t(open: string, close: string, replace: string = open, at: number = open.length + 1) =>\n\t(string: string): string =>\n\t\tstring || !(string === '' || string === undefined)\n\t\t\t? clearBleed(('' + string).indexOf(close, at), string, open, close, replace)\n\t\t\t: ''\n\nconst hexToRgb = (hex: string) => {\n\tconst match = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n\n\tif (!match) {\n\t\treturn null\n\t} else {\n\t\treturn {\n\t\t\tr: parseInt(match[1], 16),\n\t\t\tg: parseInt(match[2], 16),\n\t\t\tb: parseInt(match[3], 16)\n\t\t}\n\t}\n}\n\nconst init = (\n\topen: number | string | { r: number; g: number; b: number },\n\tclose: number | string | { r: number; g: number; b: number },\n\treplace?: string\n) => {\n\tconst openStr =\n\t\ttypeof open === 'object'\n\t\t\t? `\\x1b[38;2;${open.r};${open.g};${open.b}m` // 24-bit color escape sequence\n\t\t\t: `\\x1b[${open}m`\n\n\tconst closeStr = typeof close === 'object' ? `\\x1b[38;2;${close.r};${close.g};${close.b}m` : `\\x1b[${close}m`\n\n\treturn filterEmpty(openStr, closeStr, replace)\n}\n\ninterface ColorFunctions {\n\t[key: string]: (string: string) => string\n}\n\nexport const color: ColorFunctions = {\n\treset: init(0, 0),\n\tbold: init(1, 22, '\\x1b[22m\\x1b[1m'),\n\tdim: init(2, 22, '\\x1b[22m\\x1b[2m'),\n\titalic: init(3, 23),\n\tunderline: init(4, 24),\n\tinverse: init(7, 27),\n\thidden: init(8, 28),\n\tstrikethrough: init(9, 29),\n\tblack: init(30, 39),\n\tred: init(31, 39),\n\tgreen: init(32, 39),\n\tyellow: init(33, 39),\n\tblue: init(34, 39),\n\tmagenta: init(35, 39),\n\tcyan: init(36, 39),\n\twhite: init(37, 39),\n\tgray: init(90, 39),\n\tbgBlack: init(40, 49),\n\tbgRed: init(41, 49),\n\tbgGreen: init(42, 49),\n\tbgYellow: init(43, 49),\n\tbgBlue: init(44, 49),\n\tbgMagenta: init(45, 49),\n\tbgCyan: init(46, 49),\n\tbgWhite: init(47, 49),\n\tblackBright: init(90, 39),\n\tredBright: init(91, 39),\n\tgreenBright: init(92, 39),\n\tyellowBright: init(93, 39),\n\tblueBright: init(94, 39),\n\tmagentaBright: init(95, 39),\n\tcyanBright: init(96, 39),\n\twhiteBright: init(97, 39),\n\tbgBlackBright: init(100, 49),\n\tbgRedBright: init(101, 49),\n\tbgGreenBright: init(102, 49),\n\tbgYellowBright: init(103, 49),\n\tbgBlueBright: init(104, 49),\n\tbgMagentaBright: init(105, 49),\n\tbgCyanBright: init(106, 49),\n\tbgWhiteBright: init(107, 49)\n}\n\nexport function composeColors(...fns: ((s: string) => string)[]): (s: string) => string {\n\treturn (s) => fns.reduce((acc, fn) => fn(acc), s)\n}\n\nexport const hex = (hex: string) => {\n\tconst rgb = hexToRgb(hex)\n\treturn rgb ? init(rgb, { r: 255, g: 255, b: 255 }) : init(37, 39) // fall back to white if hex is invalid\n}\n\ninterface CreateColorsOptions {\n\tuseColor?: boolean\n}\n\nexport const createColors = ({ useColor = isColorSupported }: CreateColorsOptions = {}): ColorFunctions =>\n\tuseColor ? color : Object.keys(color).reduce((colors, key) => ({ ...colors, [key]: String }), {})\n\nexport const {\n\treset,\n\tbold,\n\tdim,\n\titalic,\n\tunderline,\n\tinverse,\n\thidden,\n\tstrikethrough,\n\tblack,\n\tred,\n\tgreen,\n\tyellow,\n\tblue,\n\tmagenta,\n\tcyan,\n\twhite,\n\tgray,\n\tbgBlack,\n\tbgRed,\n\tbgGreen,\n\tbgYellow,\n\tbgBlue,\n\tbgMagenta,\n\tbgCyan,\n\tbgWhite,\n\tblackBright,\n\tredBright,\n\tgreenBright,\n\tyellowBright,\n\tblueBright,\n\tmagentaBright,\n\tcyanBright\n} = createColors()\n"]}