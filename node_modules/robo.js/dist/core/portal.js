import { Collection } from 'discord.js';
import _ from 'node:path';
import { pathToFileURL } from 'node:url';
import { getManifest } from '../cli/utils/manifest.js';
import { hasProperties } from '../cli/utils/utils.js';
import { logger } from './logger.js';
import { composeColors, color, hex } from './color.js';
import { getConfig } from './config.js';

class E{apis;commands;context;events;middleware=[];moduleKeys=new Set;_enabledModules={};_modules={};constructor(t,o,r,i,d){this.apis=t,this.commands=o,this.context=r,this.events=i,this.middleware=d,t.forEach(s=>{s.module&&this.moduleKeys.add(s.module);}),o.forEach(s=>{s.module&&this.moduleKeys.add(s.module);}),r.forEach(s=>{s.module&&this.moduleKeys.add(s.module);}),i.forEach(s=>{s.forEach(f=>{f.module&&this.moduleKeys.add(f.module);});}),d.forEach(s=>{s.module&&this.moduleKeys.add(s.module);}),this.moduleKeys=new Set([...this.moduleKeys].sort());}module(t){let o=this._modules[t];return o||(o=new j(t,this._enabledModules),this._modules[t]=o),o}static async open(){const t=await h("api"),o=await h("commands"),r=await h("context"),i=await h("events"),d=[...(await h("middleware")).values()];return new E(t,o,r,i,d)}}class j{constructor(t,o){this._moduleName=t;this._enabledModules=o;}get isEnabled(){return this._enabledModules[this._moduleName]??!0}setEnabled(t){this._enabledModules[this._moduleName]=t;}}function N(e){const o=getConfig().plugins?.find(i=>(typeof i=="string"?i:i[0])===e);return (typeof o=="string"?null:o?.[1])??null}async function g(e,t){const{manifestEntries:o,parentEntry:r={},recursionKeys:i=[],type:d}=t,s=[];for(const f in o){const b=Array.isArray(o)&&d!=="middleware"?o:o[f];(Array.isArray(b)?b:[b]).forEach(c=>{const l=[...i,f],n={...r,...c};if(s.push(e(n,l)),hasProperties(c,["subcommands"])&&c.subcommands){const a=g(e,{manifestEntries:c.subcommands,parentEntry:n,recursionKeys:l,type:d});s.push(a);}else if(hasProperties(c,["subroutes"])&&c.subroutes){const a=g(e,{manifestEntries:c.subroutes,parentEntry:n,recursionKeys:l,type:d});s.push(a);}});}return Promise.all(s)}async function h(e){const t=new Collection,o=getManifest(),r=e==="commands"?composeColors(color.blue,color.bold):e==="context"?composeColors(hex("#536DFE"),color.bold):e==="events"?composeColors(color.magenta,color.bold):composeColors(color.gray,color.bold),R=e==="api"?n=>r(`${n}`):e==="commands"?n=>r(`/${n}`):e==="context"?n=>r(`${n} (${n})`):e==="events"?n=>r(`${n} (${o.events[n].length})`):n=>r(o.middleware[parseInt(n)]?.__path),c=Object.keys(o[e]).map(R);logger.debug(`Loading ${e}: ${c.join(", ")}`);const l=async(n,a)=>{if(!n.__path)return;const v=_.join(process.cwd(),n.__plugin?.path??"."),T=pathToFileURL(_.join(v,n.__path)).toString(),p={auto:n.__auto,description:n.description,handler:await import(T),key:a.join("/"),module:n.__module,path:n.__path,plugin:n.__plugin,type:e==="events"?"event":e==="commands"?"command":e};if(e==="events"){const m=a[0];t.has(m)||t.set(m,[]),t.get(m).push(p);}else if(e==="commands"){const m=a.join(" ");t.set(m,p);}else if(e==="context"){const m=a[0];t.set(m,p);}else e==="middleware"?t.set(a[0],p):e==="api"&&t.set(a.join("/"),p);};return e==="context"?(await g(l,{manifestEntries:o.context.message,type:e}),await g(l,{manifestEntries:o.context.user,type:e})):await g(l,{manifestEntries:o[e],type:e}),t}

export { E as default, N as getPluginOptions };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=portal.js.map