function p(){process.on("SIGINT",async()=>{const{logger:o}=await import('./logger.js'),{Robo:e}=await import('./robo.js');o.debug("Received SIGINT signal."),e.stop();}),process.on("SIGTERM",async()=>{const{logger:o}=await import('./logger.js'),{Robo:e}=await import('./robo.js');o.debug("Received SIGTERM signal."),e.stop();}),process.on("unhandledRejection",async o=>{const{loadConfig:e}=await import('./config.js'),{env:t}=await import('./env.js'),{logger:n}=await import('./logger.js'),{client:s,Robo:i}=await import('./robo.js');if(n.error(o),(await e()).experimental?.disableBot||(s?.isReady()||process.exit(1),t.nodeEnv==="production"))return;const{sendDebugError:r}=await import('./debug.js');await r(o)||i.stop(1);}),typeof process.send=="function"&&process.send?.({type:"ready"}),setTimeout(()=>{typeof process.send=="function"&&process.send?.({type:"ready",delayed:!0});},1e3);}

export { p as registerProcessEvents };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=process.js.map