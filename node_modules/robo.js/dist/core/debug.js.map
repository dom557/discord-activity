{"version":3,"sources":["../../src/core/debug.ts"],"names":["hasProperties","fs","os","ActionRowBuilder","ButtonBuilder","ButtonInteraction","ButtonStyle","ChannelType","Colors","CommandInteraction","Message","getSage","client","logger","env","URL","getState","setState","isMainThread","parentPort","STATE_KEYS","discordLogger","path","color","DEBUG_ID_PREFIX","LOG_INCREMENT","DEBUG_MODE","ANSI_REGEX","devLogCommand","interaction","logs","log","errorId","handleLogs","devLogCommandConfig","devRestartCommand","devRestartCommandConfig","devStatusCommand","totalSeconds","days","hours","minutes","seconds","uptime","cpuUsage","cpuUsagePercent","memoryUsage","totalMemory","freeMemory","devStatusCommandConfig","printErrorResponse","error","details","event","errorChannelId","errorMessage","errorReplies","message","formatError","channel","sendReply","sendDebugError","guild","stackLineRegex","getCodeCodeAtFault","err","type","stackLines","deps","depIndex","line","projectPredicate","x","stackLine","filePath","column","file","normalizedPath","lines","lineNumber","columnNumber","maxLineNumber","lineNumberPadding","result","i","paddedLineNumber","extraLength","options","stack","dependencySource","source","fields","commandKeys","filepath","a","b","response","row","handleDebugButton","id","stackButtonDisabled","logsButtonDisabled","stackTrace","logIndex","rest","startIndex","filteredLogs","endIndex","hasOlderLogs","hasNewerLogs","logsToShow"],"mappings":"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","sourcesContent":["import { hasProperties } from '../cli/utils/utils.js'\nimport fs from 'node:fs/promises'\nimport os from 'node:os'\nimport {\n\tActionRowBuilder,\n\tButtonBuilder,\n\tButtonInteraction,\n\tButtonStyle,\n\tChannelType,\n\tColors,\n\tCommandInteraction,\n\tMessage,\n\tTextChannel\n} from 'discord.js'\nimport { getSage } from '../cli/utils/utils.js'\nimport { client } from './robo.js'\nimport { logger } from './logger.js'\nimport { env } from './env.js'\nimport { URL } from 'node:url'\nimport { getState, setState } from './state.js'\nimport { isMainThread, parentPort } from 'node:worker_threads'\nimport { STATE_KEYS, discordLogger } from './constants.js'\nimport path from 'node:path'\nimport { color } from './color.js'\nimport type { CommandConfig, Event, HandlerRecord } from '../types/index.js'\nimport type { APIEmbed, APIEmbedField, BaseMessageOptions, MessageComponentInteraction } from 'discord.js'\n\nconst DEBUG_ID_PREFIX = 'robo_debug_'\n\nconst LOG_INCREMENT = 10\n\nexport const DEBUG_MODE = process.env.NODE_ENV !== 'production'\n\n// eslint-disable-next-line no-control-regex\nexport const ANSI_REGEX = /\\x1b\\[.*?m/g\n\ninterface ErrorData {\n\tlogIndex?: number\n\tlogs: string[]\n\tstack?: string\n}\n\nexport const devLogCommand = async (interaction: CommandInteraction) => {\n\tawait interaction.deferReply()\n\n\t// Increment session error counter\n\tconst logs = logger.getRecentLogs().map((log) => log.message())\n\tconst errorCounter = getState<number>(DEBUG_ID_PREFIX + 'error_counter') ?? -1\n\tconst errorId = errorCounter + 1\n\tsetState(DEBUG_ID_PREFIX + 'error_counter', errorId)\n\tsetState(`${DEBUG_ID_PREFIX}_error_${errorId}`, { logs })\n\n\thandleLogs(errorId, 0, interaction as unknown as MessageComponentInteraction, 'new')\n}\n\nexport const devLogCommandConfig: CommandConfig = {\n\tdescription: 'View most recent logs',\n\tsage: {\n\t\tdefer: false\n\t}\n}\n\nexport const devRestartCommand = async (interaction: CommandInteraction) => {\n\tawait interaction.reply({\n\t\tcontent: '```bash\\nRestarting...\\n```'\n\t})\n\tsetState(STATE_KEYS.restart, {\n\t\tchannelId: interaction.channelId,\n\t\tguildId: interaction.guildId,\n\t\tstartTime: Date.now()\n\t})\n\n\tif (isMainThread) {\n\t\tprocess.send?.({ type: 'restart' })\n\t} else {\n\t\tparentPort?.postMessage({ event: 'restart', payload: 'trigger' })\n\t}\n}\n\nexport const devRestartCommandConfig: CommandConfig = {\n\tdescription: 'Restart this Robo',\n\tsage: {\n\t\tdefer: false\n\t}\n}\n\nexport const devStatusCommand = () => {\n\tlet totalSeconds = client.uptime / 1000\n\tconst days = Math.floor(totalSeconds / 86400)\n\tconst hours = Math.floor(totalSeconds / 3600)\n\ttotalSeconds %= 3600\n\tconst minutes = Math.floor(totalSeconds / 60)\n\tconst seconds = Math.floor(totalSeconds % 60)\n\n\tlet uptime = ''\n\tif (days > 0) uptime += `${days} days, `\n\tif (hours > 0) uptime += `${hours} hours, `\n\tif (minutes > 0) uptime += `${minutes} minutes, `\n\tif (seconds > 0) uptime += `${seconds} seconds`\n\tuptime = uptime.replace(/, $/, '')\n\n\tconst cpuUsage = process.cpuUsage()\n\tconst cpuUsagePercent = ((cpuUsage.user + cpuUsage.system) / 1000000).toFixed(2)\n\n\tconst memoryUsage = process.memoryUsage().rss / (1024 * 1024)\n\tconst totalMemory = os.totalmem() / (1024 * 1024 * 1024)\n\tconst freeMemory = os.freemem() / (1024 * 1024 * 1024)\n\n\treturn {\n\t\tembeds: [\n\t\t\t{\n\t\t\t\ttitle: 'Bot Status',\n\t\t\t\tcolor: Colors.Blurple,\n\t\t\t\tfields: [\n\t\t\t\t\t{ name: 'Uptime', value: uptime, inline: true },\n\t\t\t\t\t{ name: 'Ping', value: `${client.ws.ping}ms`, inline: true },\n\t\t\t\t\t{ name: '\\u200B', value: '\\u200B', inline: true },\n\t\t\t\t\t{ name: 'CPU Usage', value: `${cpuUsagePercent}%`, inline: true },\n\t\t\t\t\t{ name: 'RAM Usage', value: `${memoryUsage.toFixed(2)} MB`, inline: true },\n\t\t\t\t\t{ name: '\\u200B', value: '\\u200B', inline: true },\n\t\t\t\t\t{ name: 'Total RAM', value: `${totalMemory.toFixed(2)} GB`, inline: true },\n\t\t\t\t\t{ name: 'Available RAM', value: `${freeMemory.toFixed(2)} GB`, inline: true },\n\t\t\t\t\t{ name: '\\u200B', value: '\\u200B', inline: true },\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Operating System',\n\t\t\t\t\t\tvalue: `${os.platform()} ${os.version()} ${os.arch()} (${os.release()})`,\n\t\t\t\t\t\tinline: false\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t}\n}\n\nexport const devStatusCommandConfig: CommandConfig = {\n\tdescription: 'View status of this Robo'\n}\n\nexport async function printErrorResponse(\n\terror: unknown,\n\tinteraction: unknown,\n\tdetails?: string,\n\tevent?: HandlerRecord<Event>\n) {\n\tconst { errorChannelId, errorMessage, errorReplies = true } = getSage()\n\tdiscordLogger.debug('Error response:', error)\n\n\t// Don't print errors in production - they may contain sensitive information\n\tif (!DEBUG_MODE || !errorReplies) {\n\t\treturn\n\t}\n\n\t// Return if interaction is not a Discord command interaction or a message directed at the bot\n\tif (\n\t\t!(interaction instanceof CommandInteraction) &&\n\t\t!(interaction instanceof Message) &&\n\t\t!(interaction instanceof ButtonInteraction)\n\t) {\n\t\treturn\n\t}\n\n\ttry {\n\t\tconst { message } = await formatError({ error, interaction, details, event })\n\n\t\tif (errorChannelId) {\n\t\t\t// Send to custom error channel\n\t\t\tconst channel = client.channels.cache.get(errorChannelId) as TextChannel\n\t\t\tif (!channel) {\n\t\t\t\tdiscordLogger.error('No error channel found with ID:', errorChannelId)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tawait channel.send(message)\n\t\t\tif (errorMessage) {\n\t\t\t\tawait sendReply({ content: errorMessage }, interaction)\n\t\t\t} else {\n\t\t\t\tdiscordLogger.warn(\n\t\t\t\t\t`Set ${color.bold('errorMessage')} in your Sage config to send a default error reply to the user`\n\t\t\t\t)\n\t\t\t}\n\t\t} else {\n\t\t\tawait sendReply(message, interaction)\n\t\t}\n\t} catch (error) {\n\t\t// This had one job... and it failed\n\t\tdiscordLogger.debug('Error printing error response:', error)\n\t}\n}\n\n// Send response as follow-up if the command has already been replied to\nasync function sendReply(message: BaseMessageOptions, interaction: unknown) {\n\tif (interaction instanceof CommandInteraction || interaction instanceof ButtonInteraction) {\n\t\tif (interaction.replied || interaction.deferred) {\n\t\t\treturn interaction.followUp(message)\n\t\t} else {\n\t\t\treturn interaction.reply(message)\n\t\t}\n\t} else if (interaction instanceof Message) {\n\t\treturn interaction.channel.send(message)\n\t}\n}\n\nexport async function sendDebugError(error: unknown) {\n\ttry {\n\t\t// Find the guild by its ID\n\t\tconst { errorChannelId } = getSage()\n\t\tconst guild = client.guilds.cache.get(env.discord.guildId)\n\t\tconst channel = guild?.channels?.cache?.get(env.discord.debugChannelId ?? errorChannelId)\n\t\tif (!guild || !channel) {\n\t\t\tdiscordLogger.warn(\n\t\t\t\t`Fix the error or set ${color.bold('DISCORD_GUILD_ID')} and ${color.bold(\n\t\t\t\t\t'DISCORD_DEBUG_CHANNEL_ID'\n\t\t\t\t)} environment variables to prevent your Robo from stopping.`\n\t\t\t)\n\t\t\treturn false\n\t\t}\n\n\t\t// Ensure the channel is a text-based channel\n\t\tif (channel.type !== ChannelType.GuildText) {\n\t\t\tdiscordLogger.warn(`Debug channel specified is not a text-based channel.`)\n\t\t\treturn false\n\t\t}\n\n\t\t// Send the message to the channel\n\t\tconst { message } = await formatError({ error })\n\t\tawait channel.send(message)\n\t\tdiscordLogger.debug(`Message sent to channel ${env.discord.debugChannelId} in guild ${env.discord.guildId}.`)\n\t\treturn true\n\t} catch (error) {\n\t\tdiscordLogger.error('Error sending message:', error)\n\t\treturn true\n\t}\n}\n\nconst stackLineRegex = /at .* \\((.*):(\\d+):(\\d+)\\)/\n\nasync function getCodeCodeAtFault(err: Error, type: 'dependency' | 'source') {\n\ttry {\n\t\t// Parse out lines from stack trace, removing the first line\n\t\tconst stackLines = err.stack?.split('\\n')\n\t\tstackLines?.shift()\n\t\tif (!stackLines) {\n\t\t\tthrow new Error('No stack trace found')\n\t\t}\n\n\t\t// Find first module line, removing if not the first and Robo.js to avoid underlying framework caller\n\t\tconst deps = path.sep + 'node_modules' + path.sep\n\t\tconst depIndex = stackLines.findIndex((line) => line.includes(deps))\n\t\tif (type === 'dependency' && depIndex > 0 && stackLines[depIndex].includes(deps + 'robo.js/')) {\n\t\t\treturn null\n\t\t}\n\n\t\t// Find stack line to analyze\n\t\tconst projectPredicate = (line: string) => {\n\t\t\tconst x = line.trim()\n\t\t\treturn x && !x.includes(deps) && !x.includes('node:') && x.includes(':') && x.includes(path.sep)\n\t\t}\n\t\tconst stackLine = type === 'dependency' ? stackLines[depIndex] : stackLines.find(projectPredicate)\n\t\tconst [, filePath, line, column] = stackLine.match(stackLineRegex) || []\n\n\t\tif (!filePath || !line || !column) {\n\t\t\tthrow new Error('Could not parse stack trace')\n\t\t}\n\n\t\t// Find original source file path\n\t\tconst file = filePath.replaceAll('/.robo/build/commands', '').replaceAll('/.robo/build/events', '')\n\t\tlet normalizedPath = file.startsWith('file:') ? decodeURI(new URL(file).pathname) : file\n\t\tif (normalizedPath.startsWith('/') && process.platform === 'win32') {\n\t\t\tnormalizedPath = normalizedPath.slice(1)\n\t\t}\n\n\t\t// Read file contents\n\t\tconst fileContent = await fs.readFile(normalizedPath, 'utf-8')\n\t\tconst lines = fileContent.split('\\n')\n\t\tconst lineNumber = parseInt(line, 10)\n\t\tconst columnNumber = parseInt(column, 10)\n\t\tconst maxLineNumber = Math.min(lineNumber + 2, lines.length)\n\t\tconst lineNumberPadding = maxLineNumber.toString().length\n\n\t\tlet result = ''\n\t\tfor (let i = Math.max(lineNumber - 3, 0); i < maxLineNumber; i++) {\n\t\t\tconst paddedLineNumber = (i + 1).toString().padStart(lineNumberPadding, ' ')\n\t\t\tresult += `${paddedLineNumber} | ${lines[i]}\\n`\n\t\t\tif (i === lineNumber - 1) {\n\t\t\t\tresult += ' '.repeat(columnNumber + lineNumberPadding + 2) + '^' + '\\n'\n\t\t\t}\n\t\t}\n\n\t\t// Truncate entire data set presented if too long (includes decorators + safe offset)\n\t\tconst extraLength = normalizedPath.length + type.length + 10 + 5\n\t\tconst length = result.length + extraLength\n\t\tif (length > 1024) {\n\t\t\tresult = result.slice(0, 1021 - extraLength) + '...'\n\t\t}\n\n\t\treturn {\n\t\t\tcode: result,\n\t\t\tfile: normalizedPath,\n\t\t\ttype: file.endsWith('.ts') ? 'ts' : 'js'\n\t\t}\n\t} catch (error) {\n\t\tdiscordLogger.debug('Error getting code at fault:', error)\n\t\treturn null\n\t}\n}\n\ninterface FormatErrorOptions {\n\tdetails?: string\n\terror: unknown\n\tevent?: HandlerRecord<Event>\n\tinteraction?: unknown\n}\n\ninterface FormatErrorResult {\n\tlogs: string[]\n\tmessage: BaseMessageOptions\n\tstack?: string\n}\n\nasync function formatError(options: FormatErrorOptions): Promise<FormatErrorResult> {\n\tconst { details, error, event, interaction } = options\n\tconst { errorChannelId } = getSage()\n\n\t// Extract readable error message or assign default\n\tlet message = 'There was an error while executing this command!'\n\tif (error instanceof Error) {\n\t\tmessage = error.message\n\t} else if (typeof error === 'string') {\n\t\tmessage = error\n\t}\n\tmessage = message.replace(ANSI_REGEX, '')\n\tmessage += '\\n\\u200b'\n\n\t// Try to get code at fault from stack trace\n\tconst logs = logger.getRecentLogs().map((log) => log.message())\n\tconst stack = error instanceof Error ? error.stack : null\n\tconst dependencySource = error instanceof Error ? await getCodeCodeAtFault(error, 'dependency') : null\n\tconst source = error instanceof Error ? await getCodeCodeAtFault(error, 'source') : null\n\n\t// Assemble error response using fanceh embeds\n\tconst fields: APIEmbedField[] = []\n\n\t// Include additional details available\n\tif (interaction instanceof CommandInteraction) {\n\t\tconst commandKeys = [interaction.commandName]\n\t\tif (hasProperties<{ getSubcommandGroup: () => string }>(interaction.options, ['getSubcommandGroup'])) {\n\t\t\ttry {\n\t\t\t\tcommandKeys.push(interaction.options.getSubcommandGroup())\n\t\t\t} catch {\n\t\t\t\t// Ignore\n\t\t\t}\n\t\t}\n\t\tif (hasProperties<{ getSubcommand: () => string }>(interaction.options, ['getSubcommand'])) {\n\t\t\ttry {\n\t\t\t\tcommandKeys.push(interaction.options.getSubcommand())\n\t\t\t} catch {\n\t\t\t\t// Ignore\n\t\t\t}\n\t\t}\n\n\t\t// Include channel and user if replying in different channel\n\t\tif (errorChannelId) {\n\t\t\tfields.push({\n\t\t\t\tname: 'Channel',\n\t\t\t\tvalue: `<#${interaction.channelId}>`\n\t\t\t})\n\n\t\t\tfields.push({\n\t\t\t\tname: 'User',\n\t\t\t\tvalue: `<@${interaction.user.id}>`\n\t\t\t})\n\t\t}\n\n\t\tfields.push({\n\t\t\tname: 'Command',\n\t\t\tvalue: '`/' + commandKeys.filter(Boolean).join(' ') + '`'\n\t\t})\n\t}\n\tif (details) {\n\t\tfields.push({\n\t\t\tname: 'Details',\n\t\t\tvalue: details\n\t\t})\n\t}\n\tif (event) {\n\t\tconst filepath = source?.file?.replace(process.cwd(), '') ?? event.path\n\t\tfields.push({\n\t\t\tname: 'Event',\n\t\t\tvalue: '`' + filepath + '`'\n\t\t})\n\t}\n\tif (dependencySource) {\n\t\tconst file = dependencySource.file.replace(process.cwd(), '')\n\t\tfields.push({\n\t\t\tname: 'Dependency Source',\n\t\t\tvalue: `\\`${file}\\`\\n` + '```' + `${dependencySource.type}\\n` + dependencySource.code + '\\n```'\n\t\t})\n\t}\n\tif (source) {\n\t\tconst file = source.file.replace(process.cwd(), '')\n\t\tfields.push({\n\t\t\tname: 'Project Source',\n\t\t\tvalue: `\\`${file}\\`\\n` + '```' + `${source.type}\\n` + source.code + '\\n```'\n\t\t})\n\t}\n\n\t// Sort fields alphabetically\n\tfields.sort((a, b) => a.name.localeCompare(b.name))\n\n\t// Assemble response as an embed\n\tconst response: APIEmbed = {\n\t\tcolor: Colors.Red,\n\t\tfields: fields\n\t}\n\n\t// Increment session error counter\n\tconst errorCounter = getState<number>(DEBUG_ID_PREFIX + 'error_counter') ?? -1\n\tconst errorId = errorCounter + 1\n\tsetState(DEBUG_ID_PREFIX + 'error_counter', errorId)\n\tsetState(`${DEBUG_ID_PREFIX}_error_${errorId}`, { logs, stack })\n\n\t// Assemble button bar\n\tconst row = new ActionRowBuilder<ButtonBuilder>().addComponents(\n\t\tnew ButtonBuilder({\n\t\t\tlabel: 'Show stack trace',\n\t\t\tstyle: ButtonStyle.Danger,\n\t\t\tcustomId: `${DEBUG_ID_PREFIX}stack_trace_${errorId}`\n\t\t}),\n\t\tnew ButtonBuilder({\n\t\t\tlabel: 'Show logs',\n\t\t\tstyle: ButtonStyle.Primary,\n\t\t\tcustomId: `${DEBUG_ID_PREFIX}logs_${errorId}`\n\t\t})\n\t)\n\n\treturn {\n\t\tlogs: logs,\n\t\tmessage: {\n\t\t\tcontent: message,\n\t\t\tembeds: fields.length ? [response] : [],\n\t\t\tcomponents: [row]\n\t\t},\n\t\tstack: stack\n\t}\n}\n\n/**\n * Wait for user to click on the button bar and handle the response\n */\nexport async function handleDebugButton(interaction: ButtonInteraction) {\n\t// Only handle debug buttons made by Robo.js\n\tif (!interaction.isButton() || !interaction.customId.startsWith(DEBUG_ID_PREFIX)) {\n\t\treturn\n\t}\n\n\t// Parse button ID alongside existing disabled states\n\tconst id = interaction.customId.replace(DEBUG_ID_PREFIX, '')\n\tconst stackButtonDisabled = interaction.message.components[0].components[0].disabled\n\tconst logsButtonDisabled = interaction.message.components[0].components[1].disabled\n\n\tif (id.startsWith('stack_trace')) {\n\t\tconst errorId = id.replace('stack_trace_', '')\n\t\tconst { stack } = getState<ErrorData>(`${DEBUG_ID_PREFIX}_error_${errorId}`)\n\n\t\t// Make button disabled\n\t\tawait interaction.update({\n\t\t\tcomponents: [\n\t\t\t\tnew ActionRowBuilder<ButtonBuilder>().addComponents(\n\t\t\t\t\tnew ButtonBuilder({\n\t\t\t\t\t\tlabel: 'Show stack trace',\n\t\t\t\t\t\tstyle: ButtonStyle.Danger,\n\t\t\t\t\t\tcustomId: `${DEBUG_ID_PREFIX}stack_trace_${errorId}`,\n\t\t\t\t\t\tdisabled: true\n\t\t\t\t\t}),\n\t\t\t\t\tnew ButtonBuilder({\n\t\t\t\t\t\tlabel: 'Show logs',\n\t\t\t\t\t\tstyle: ButtonStyle.Primary,\n\t\t\t\t\t\tcustomId: `${DEBUG_ID_PREFIX}logs_${errorId}`,\n\t\t\t\t\t\tdisabled: logsButtonDisabled\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t]\n\t\t})\n\n\t\tconst stackTrace = stack\n\t\t\t.replace('/.robo/build/commands', '')\n\t\t\t.replace('/.robo/build/events', '')\n\t\t\t.replaceAll('\\n', '\\n> ')\n\t\tawait interaction.followUp('> ```js\\n> ' + stackTrace + '\\n> ```')\n\t} else if (id.startsWith('logs')) {\n\t\tconst errorId = parseInt(id.replace('logs_', ''))\n\n\t\t// Make button disabled\n\t\tawait interaction.update({\n\t\t\tcomponents: [\n\t\t\t\tnew ActionRowBuilder<ButtonBuilder>().addComponents(\n\t\t\t\t\tnew ButtonBuilder({\n\t\t\t\t\t\tlabel: 'Show stack trace',\n\t\t\t\t\t\tstyle: ButtonStyle.Danger,\n\t\t\t\t\t\tcustomId: `${DEBUG_ID_PREFIX}stack_trace_${errorId}`,\n\t\t\t\t\t\tdisabled: stackButtonDisabled\n\t\t\t\t\t}),\n\t\t\t\t\tnew ButtonBuilder({\n\t\t\t\t\t\tlabel: 'Show logs',\n\t\t\t\t\t\tstyle: ButtonStyle.Primary,\n\t\t\t\t\t\tcustomId: `${DEBUG_ID_PREFIX}logs_${errorId}`,\n\t\t\t\t\t\tdisabled: true\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t]\n\t\t})\n\n\t\thandleLogs(errorId, 0, interaction, 'new')\n\t} else if (id.startsWith('older_logs')) {\n\t\tconst errorId = parseInt(id.replace('older_logs_', ''))\n\t\tconst { logIndex = 0, ...rest } = getState<ErrorData>(`${DEBUG_ID_PREFIX}_error_${errorId}`)\n\t\tsetState(`${DEBUG_ID_PREFIX}_error_${errorId}`, { ...rest, logIndex: logIndex + LOG_INCREMENT })\n\t\thandleLogs(errorId, logIndex + LOG_INCREMENT, interaction, 'existing')\n\t} else if (id.startsWith('newer_logs')) {\n\t\tconst errorId = parseInt(id.replace('newer_logs_', ''))\n\t\tconst { logIndex = 0, ...rest } = getState<ErrorData>(`${DEBUG_ID_PREFIX}_error_${errorId}`)\n\t\tsetState(`${DEBUG_ID_PREFIX}_error_${errorId}`, { ...rest, logIndex: logIndex - LOG_INCREMENT })\n\t\thandleLogs(errorId, logIndex - LOG_INCREMENT, interaction, 'existing')\n\t}\n}\n\nasync function handleLogs(\n\terrorId: number,\n\tstartIndex: number,\n\tinteraction: MessageComponentInteraction,\n\ttype: 'existing' | 'new'\n) {\n\tconst { logs } = getState<ErrorData>(`${DEBUG_ID_PREFIX}_error_${errorId}`)\n\tconst filteredLogs = logs.filter(Boolean)\n\tconst endIndex = startIndex + LOG_INCREMENT\n\tconst hasOlderLogs = endIndex < filteredLogs.length\n\tconst hasNewerLogs = startIndex > 0\n\n\t// Cap logs such that they don't exceed 2000 character limit\n\tconst logsToShow = filteredLogs.slice(startIndex, endIndex).reverse().join('\\n> ').substring(0, 1986)\n\n\tconst row = new ActionRowBuilder<ButtonBuilder>().addComponents(\n\t\tnew ButtonBuilder({\n\t\t\tlabel: 'Older',\n\t\t\tstyle: ButtonStyle.Secondary,\n\t\t\tcustomId: `${DEBUG_ID_PREFIX}older_logs_${errorId}`,\n\t\t\tdisabled: !hasOlderLogs\n\t\t}),\n\t\tnew ButtonBuilder({\n\t\t\tlabel: 'Newer',\n\t\t\tstyle: ButtonStyle.Secondary,\n\t\t\tcustomId: `${DEBUG_ID_PREFIX}newer_logs_${errorId}`,\n\t\t\tdisabled: !hasNewerLogs\n\t\t})\n\t)\n\n\tif (type === 'new') {\n\t\tawait interaction.followUp({ content: '> ```\\n> ' + logsToShow + '\\n> ```', components: [row] })\n\t} else if (type === 'existing') {\n\t\tawait interaction.update({ content: '> ```\\n> ' + logsToShow + '\\n> ```', components: [row] })\n\t}\n}\n"]}