import { FLASHCORE_KEYS } from './constants.js';
import { logger } from './logger.js';
import { Flashcore } from './flashcore.js';

const s={};class o{static _prefixes=new Set;_prefix;_options;constructor(e,n){this._prefix=e,this._options=n,this.fork=this.fork.bind(this),this.getState=this.getState.bind(this),this.setState=this.setState.bind(this);}static fork(e,n){return o._prefixes.add(e),new o(e,n)}static listForks(){return new Array(...o._prefixes)}fork(e,n){return new o(`${this._prefix}__${e}`,n)}getState(e){return g(`${this._prefix}__${e}`)}setState(e,n,r){S(`${this._prefix}__${e}`,n,{...r??{},persist:r?.persist??this._options?.persist});}}const l=["String","Number","Boolean","Array","Object"];function d(t,e={value:!1}){if(typeof t!="function"){if(t!==null&&typeof t=="object")if(l.includes(t.constructor.name)){if(Array.isArray(t))return t.map(n=>d(n,e)).filter(n=>n!==void 0);{const n={};for(const r in t){const i=d(t[r],e);i!==void 0&&(n[r]=i);}return n}}else {e.value||(logger.warn("Removed state value as it is not serializable:",t),e.value=!0);return}return t}}function _(){Object.keys(s).forEach(t=>{delete s[t];});}function g(t,e){return e?.namespace&&(t=`${e.namespace}__${t}`),s[t]??e?.default}function m(t){logger.debug("Loading state...",t),Object.keys(t).forEach(e=>{s[e]=t[e];});}function b(){logger.debug("Saving state...",s),process.send({type:"state-save",state:s});}function S(t,e,n){const{persist:r}=n??{};n?.namespace&&(t=`${n.namespace}__${t}`);let i=e;if(typeof e=="function"){const p=s[t];i=e(p);}return s[t]=i,r&&(async()=>{const c=await Flashcore.get(FLASHCORE_KEYS.state)??{};c[t]=i,Flashcore.set(FLASHCORE_KEYS.state,c);})(),i}

export { o as State, _ as clearState, g as getState, m as loadState, d as removeInstances, b as saveState, S as setState, s as state };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=state.js.map