import { logger } from './logger.js';
import c from 'node:fs';
import s from 'node:path';
import { pathToFileURL } from 'node:url';

let p=null;const a=new Set;function N(){return p}function $(){return a}async function v(o="robo"){const i=await w(o);let n;return i?(n=await m(i),a.add(i),i.includes(s.sep+"config"+s.sep)&&(logger.debug("Scanning for plugin files..."),n.plugins=n.plugins??[],await x(i,(t,r,e)=>{const g=n.plugins?.findIndex(f=>f===t||f[0]===t);g!==-1&&n.plugins?.splice(g,1),n.plugins?.push([t,r]),a.add(e);}))):n={clientOptions:{intents:[]}},p=n,logger.debug("Loaded configuration file:",n),n}async function w(o="robo"){const i=[".mjs",".cjs",".json"],n=["config"+s.sep,".config"+s.sep];for(const t of n)for(const r of i){const e=s.join(process.cwd(),`${t}${o}${r}`);try{if(c.existsSync(e))return logger.debug("Found configuration file at",e),e}catch{}}return null}async function x(o,i){const n=s.join(s.dirname(o),"plugins");if(!c.existsSync(n))return;const t=c.readdirSync(n);for(const r of t){const e=s.join(n,r);if(c.statSync(e).isDirectory()){const g=c.readdirSync(e);for(const f of g){const l=s.join(e,f),[C,y]=await d(l,n);i("@"+C,y,l);}}else {const[g,f]=await d(e,n);i(g,f,e);}}}async function d(o,i){let n;i?n=s.relative(i,o):n=s.basename(o);const t=n.split(".")[0];try{const r=await m(o);return [t,r]}catch(r){return logger.debug(`Failed to load plugin configuration file for ${t}:`,r),[t,{}]}}async function m(o){if(o.endsWith(".json"))try{const i=c.readFileSync(o,"utf8");return JSON.parse(i)??{}}catch{return {}}else try{const i=await import(pathToFileURL(o).toString());return i.default??i??{}}catch(i){return logger.error(i),{}}}

export { N as getConfig, $ as getConfigPaths, v as loadConfig, w as loadConfigPath };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=config.js.map