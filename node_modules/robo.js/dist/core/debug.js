import { getSage, hasProperties } from '../cli/utils/utils.js';
import K from 'node:fs/promises';
import _ from 'node:os';
import { Colors, CommandInteraction, Message, ButtonInteraction, ChannelType, ActionRowBuilder, ButtonBuilder, ButtonStyle } from 'discord.js';
import { client } from './robo.js';
import { logger } from './logger.js';
import { env } from './env.js';
import { URL } from 'node:url';
import { getState, setState } from './state.js';
import { isMainThread, parentPort } from 'node:worker_threads';
import { STATE_KEYS, discordLogger } from './constants.js';
import P from 'node:path';
import { color } from './color.js';

const l="robo_debug_",E=10,Q=process.env.NODE_ENV!=="production",Z=/\x1b\[.*?m/g,we=async n=>{await n.deferReply();const e=logger.getRecentLogs().map(o=>o.message()),s=(getState(l+"error_counter")??-1)+1;setState(l+"error_counter",s),setState(`${l}_error_${s}`,{logs:e}),R(s,0,n,"new");},be={description:"View most recent logs",sage:{defer:!1}},Ie=async n=>{await n.reply({content:"```bash\nRestarting...\n```"}),setState(STATE_KEYS.restart,{channelId:n.channelId,guildId:n.guildId,startTime:Date.now()}),isMainThread?process.send?.({type:"restart"}):parentPort?.postMessage({event:"restart",payload:"trigger"});},$e={description:"Restart this Robo",sage:{defer:!1}},ye=()=>{let n=client.uptime/1e3;const e=Math.floor(n/86400),t=Math.floor(n/3600);n%=3600;const s=Math.floor(n/60),o=Math.floor(n%60);let r="";e>0&&(r+=`${e} days, `),t>0&&(r+=`${t} hours, `),s>0&&(r+=`${s} minutes, `),o>0&&(r+=`${o} seconds`),r=r.replace(/, $/,"");const a=process.cpuUsage(),u=((a.user+a.system)/1e6).toFixed(2),m=process.memoryUsage().rss/(1024*1024),p=_.totalmem()/(1024*1024*1024),d=_.freemem()/(1024*1024*1024);return {embeds:[{title:"Bot Status",color:Colors.Blurple,fields:[{name:"Uptime",value:r,inline:!0},{name:"Ping",value:`${client.ws.ping}ms`,inline:!0},{name:"\u200B",value:"\u200B",inline:!0},{name:"CPU Usage",value:`${u}%`,inline:!0},{name:"RAM Usage",value:`${m.toFixed(2)} MB`,inline:!0},{name:"\u200B",value:"\u200B",inline:!0},{name:"Total RAM",value:`${p.toFixed(2)} GB`,inline:!0},{name:"Available RAM",value:`${d.toFixed(2)} GB`,inline:!0},{name:"\u200B",value:"\u200B",inline:!0},{name:"Operating System",value:`${_.platform()} ${_.version()} ${_.arch()} (${_.release()})`,inline:!1}]}]}},_e={description:"View status of this Robo"};async function Ce(n,e,t,s){const{errorChannelId:o,errorMessage:r,errorReplies:a=!0}=getSage();if(discordLogger.debug("Error response:",n),!(!Q||!a)&&!(!(e instanceof CommandInteraction)&&!(e instanceof Message)&&!(e instanceof ButtonInteraction)))try{const{message:u}=await V({error:n,interaction:e,details:t,event:s});if(o){const m=client.channels.cache.get(o);if(!m){discordLogger.error("No error channel found with ID:",o);return}await m.send(u),r?await W({content:r},e):discordLogger.warn(`Set ${color.bold("errorMessage")} in your Sage config to send a default error reply to the user`);}else await W(u,e);}catch(u){discordLogger.debug("Error printing error response:",u);}}async function W(n,e){if(e instanceof CommandInteraction||e instanceof ButtonInteraction)return e.replied||e.deferred?e.followUp(n):e.reply(n);if(e instanceof Message)return e.channel.send(n)}async function Ee(n){try{const{errorChannelId:e}=getSage(),t=client.guilds.cache.get(env.discord.guildId),s=t?.channels?.cache?.get(env.discord.debugChannelId??e);if(!t||!s)return discordLogger.warn(`Fix the error or set ${color.bold("DISCORD_GUILD_ID")} and ${color.bold("DISCORD_DEBUG_CHANNEL_ID")} environment variables to prevent your Robo from stopping.`),!1;if(s.type!==ChannelType.GuildText)return discordLogger.warn("Debug channel specified is not a text-based channel."),!1;const{message:o}=await V({error:n});return await s.send(o),discordLogger.debug(`Message sent to channel ${env.discord.debugChannelId} in guild ${env.discord.guildId}.`),!0}catch(e){return discordLogger.error("Error sending message:",e),!0}}const ee=/at .* \((.*):(\d+):(\d+)\)/;async function H(n,e){try{const t=n.stack?.split(`
`);if(t?.shift(),!t)throw new Error("No stack trace found");const s=P.sep+"node_modules"+P.sep,o=t.findIndex(g=>g.includes(s));if(e==="dependency"&&o>0&&t[o].includes(s+"robo.js/"))return null;const r=g=>{const I=g.trim();return I&&!I.includes(s)&&!I.includes("node:")&&I.includes(":")&&I.includes(P.sep)},a=e==="dependency"?t[o]:t.find(r),[,u,m,p]=a.match(ee)||[];if(!u||!m||!p)throw new Error("Could not parse stack trace");const d=u.replaceAll("/.robo/build/commands","").replaceAll("/.robo/build/events","");let c=d.startsWith("file:")?decodeURI(new URL(d).pathname):d;c.startsWith("/")&&process.platform==="win32"&&(c=c.slice(1));const D=(await K.readFile(c,"utf-8")).split(`
`),h=parseInt(m,10),k=parseInt(p,10),i=Math.min(h+2,D.length),v=i.toString().length;let y="";for(let g=Math.max(h-3,0);g<i;g++){const I=(g+1).toString().padStart(v," ");y+=`${I} | ${D[g]}
`,g===h-1&&(y+=" ".repeat(k+v+2)+`^
`);}const A=c.length+e.length+10+5;return y.length+A>1024&&(y=y.slice(0,1021-A)+"..."),{code:y,file:c,type:d.endsWith(".ts")?"ts":"js"}}catch(t){return discordLogger.debug("Error getting code at fault:",t),null}}async function V(n){const{details:e,error:t,event:s,interaction:o}=n,{errorChannelId:r}=getSage();let a="There was an error while executing this command!";t instanceof Error?a=t.message:typeof t=="string"&&(a=t),a=a.replace(Z,""),a+=`
\u200B`;const u=logger.getRecentLogs().map(i=>i.message()),m=t instanceof Error?t.stack:null,p=t instanceof Error?await H(t,"dependency"):null,d=t instanceof Error?await H(t,"source"):null,c=[];if(o instanceof CommandInteraction){const i=[o.commandName];if(hasProperties(o.options,["getSubcommandGroup"]))try{i.push(o.options.getSubcommandGroup());}catch{}if(hasProperties(o.options,["getSubcommand"]))try{i.push(o.options.getSubcommand());}catch{}r&&(c.push({name:"Channel",value:`<#${o.channelId}>`}),c.push({name:"User",value:`<@${o.user.id}>`})),c.push({name:"Command",value:"`/"+i.filter(Boolean).join(" ")+"`"});}if(e&&c.push({name:"Details",value:e}),s){const i=d?.file?.replace(process.cwd(),"")??s.path;c.push({name:"Event",value:"`"+i+"`"});}if(p){const i=p.file.replace(process.cwd(),"");c.push({name:"Dependency Source",value:`\`${i}\`
\`\`\`${p.type}
`+p.code+"\n```"});}if(d){const i=d.file.replace(process.cwd(),"");c.push({name:"Project Source",value:`\`${i}\`
\`\`\`${d.type}
`+d.code+"\n```"});}c.sort((i,v)=>i.name.localeCompare(v.name));const N={color:Colors.Red,fields:c},h=(getState(l+"error_counter")??-1)+1;setState(l+"error_counter",h),setState(`${l}_error_${h}`,{logs:u,stack:m});const k=new ActionRowBuilder().addComponents(new ButtonBuilder({label:"Show stack trace",style:ButtonStyle.Danger,customId:`${l}stack_trace_${h}`}),new ButtonBuilder({label:"Show logs",style:ButtonStyle.Primary,customId:`${l}logs_${h}`}));return {logs:u,message:{content:a,embeds:c.length?[N]:[],components:[k]},stack:m}}async function ve(n){if(!n.isButton()||!n.customId.startsWith(l))return;const e=n.customId.replace(l,""),t=n.message.components[0].components[0].disabled,s=n.message.components[0].components[1].disabled;if(e.startsWith("stack_trace")){const o=e.replace("stack_trace_",""),{stack:r}=getState(`${l}_error_${o}`);await n.update({components:[new ActionRowBuilder().addComponents(new ButtonBuilder({label:"Show stack trace",style:ButtonStyle.Danger,customId:`${l}stack_trace_${o}`,disabled:!0}),new ButtonBuilder({label:"Show logs",style:ButtonStyle.Primary,customId:`${l}logs_${o}`,disabled:s}))]});const a=r.replace("/.robo/build/commands","").replace("/.robo/build/events","").replaceAll(`
`,`
> `);await n.followUp("> ```js\n> "+a+"\n> ```");}else if(e.startsWith("logs")){const o=parseInt(e.replace("logs_",""));await n.update({components:[new ActionRowBuilder().addComponents(new ButtonBuilder({label:"Show stack trace",style:ButtonStyle.Danger,customId:`${l}stack_trace_${o}`,disabled:t}),new ButtonBuilder({label:"Show logs",style:ButtonStyle.Primary,customId:`${l}logs_${o}`,disabled:!0}))]}),R(o,0,n,"new");}else if(e.startsWith("older_logs")){const o=parseInt(e.replace("older_logs_","")),{logIndex:r=0,...a}=getState(`${l}_error_${o}`);setState(`${l}_error_${o}`,{...a,logIndex:r+E}),R(o,r+E,n,"existing");}else if(e.startsWith("newer_logs")){const o=parseInt(e.replace("newer_logs_","")),{logIndex:r=0,...a}=getState(`${l}_error_${o}`);setState(`${l}_error_${o}`,{...a,logIndex:r-E}),R(o,r-E,n,"existing");}}async function R(n,e,t,s){const{logs:o}=getState(`${l}_error_${n}`),r=o.filter(Boolean),a=e+E,u=a<r.length,m=e>0,p=r.slice(e,a).reverse().join(`
> `).substring(0,1986),d=new ActionRowBuilder().addComponents(new ButtonBuilder({label:"Older",style:ButtonStyle.Secondary,customId:`${l}older_logs_${n}`,disabled:!u}),new ButtonBuilder({label:"Newer",style:ButtonStyle.Secondary,customId:`${l}newer_logs_${n}`,disabled:!m}));s==="new"?await t.followUp({content:"> ```\n> "+p+"\n> ```",components:[d]}):s==="existing"&&await t.update({content:"> ```\n> "+p+"\n> ```",components:[d]});}

export { Z as ANSI_REGEX, Q as DEBUG_MODE, we as devLogCommand, be as devLogCommandConfig, Ie as devRestartCommand, $e as devRestartCommandConfig, ye as devStatusCommand, _e as devStatusCommandConfig, ve as handleDebugButton, Ce as printErrorResponse, Ee as sendDebugError };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=debug.js.map